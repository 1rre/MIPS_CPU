$version Generated by VerilatedVcd $end
$date Wed Dec 16 14:16:43 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 '. active $end
  $var wire 32 7. address [31:0] $end
  $var wire  4 _. byteenable [3:0] $end
  $var wire  1 u- clk $end
  $var wire  1 G. read $end
  $var wire 32 g. readdata [31:0] $end
  $var wire 32 /. register_v0 [31:0] $end
  $var wire  1 }- reset $end
  $var wire  1 O. waitrequest $end
  $var wire  1 ?. write $end
  $var wire 32 W. writedata [31:0] $end
  $scope module mips_cpu_bus $end
   $var wire 32 E! ALU_HI_output_execute [31:0] $end
   $var wire 32 E- ALU_HI_output_memory [31:0] $end
   $var wire 32 e- ALU_HI_output_writeback [31:0] $end
   $var wire 32 M! ALU_LO_output_execute [31:0] $end
   $var wire 32 M- ALU_LO_output_memory [31:0] $end
   $var wire 32 m- ALU_LO_output_writeback [31:0] $end
   $var wire  6 Q# ALU_function_decode [5:0] $end
   $var wire  6 C( ALU_function_execute [5:0] $end
   $var wire 32 =! ALU_output_execute [31:0] $end
   $var wire 32 7* ALU_output_memory [31:0] $end
   $var wire 32 G* ALU_output_memory_resolved [31:0] $end
   $var wire 32 9+ ALU_output_writeback [31:0] $end
   $var wire  2 9# ALU_src_B_decode [1:0] $end
   $var wire  2 ;( ALU_src_B_execute [1:0] $end
   $var wire  1 #( HALT_decode $end
   $var wire  1 k( HALT_execute $end
   $var wire  1 y' HALT_fetch $end
   $var wire  1 '* HALT_memory $end
   $var wire  1 o* HALT_writeback $end
   $var wire  1 q# HI_register_write_decode $end
   $var wire  1 s, HI_register_write_execute $end
   $var wire  1 5- HI_register_write_memory $end
   $var wire  1 U- HI_register_write_writeback $end
   $var wire  1 y# LO_register_write_decode $end
   $var wire  1 {, LO_register_write_execute $end
   $var wire  1 =- LO_register_write_memory $end
   $var wire  1 ]- LO_register_write_writeback $end
   $var wire  5 #, Rd_decode [4:0] $end
   $var wire  5 =) Rd_execute [4:0] $end
   $var wire  5 q+ Rs_decode [4:0] $end
   $var wire  5 -) Rs_execute [4:0] $end
   $var wire  5 y+ Rt_decode [4:0] $end
   $var wire  5 5) Rt_execute [4:0] $end
   $var wire  1 '. active $end
   $var wire 32 7. address [31:0] $end
   $var wire  1 I# branch_decode $end
   $var wire  4 _. byteenable [3:0] $end
   $var wire  4 { byteenable_memory [3:0] $end
   $var wire  4 !+ byteenable_writeback [3:0] $end
   $var wire  1 u- clk $end
   $var wire 32 C$ comparator_1 [31:0] $end
   $var wire 32 K$ comparator_2 [31:0] $end
   $var wire 32 7* data_address [31:0] $end
   $var wire  1 S equal_decode $end
   $var wire  2 C, fetch_state [1:0] $end
   $var wire  1 c$ flush_execute_register $end
   $var wire  1 I+ forward_A_decode $end
   $var wire  3 k forward_A_execute [2:0] $end
   $var wire  1 Q+ forward_B_decode $end
   $var wire  3 s forward_B_execute [2:0] $end
   $var wire 16 +, immediate [15:0] $end
   $var wire 32 i' instr_address [31:0] $end
   $var wire 32 a+ instruction_decode [31:0] $end
   $var wire  1 Y+ internal_clk $end
   $var wire  1 i# j_instruction_decode $end
   $var wire  1 [( j_instruction_execute $end
   $var wire  1 }) j_instruction_memory $end
   $var wire 26 3, j_offset [25:0] $end
   $var wire 32 A+ j_program_counter_decode [31:0] $end
   $var wire 32 ]) j_program_counter_execute [31:0] $end
   $var wire 32 O* j_program_counter_memory [31:0] $end
   $var wire  1 )# memory_to_register_decode $end
   $var wire  1 c, memory_to_register_execute $end
   $var wire  1 %- memory_to_register_memory $end
   $var wire  1 g* memory_to_register_writeback $end
   $var wire  1 1# memory_write_decode $end
   $var wire  1 k, memory_write_execute $end
   $var wire  1 -- memory_write_memory $end
   $var wire  6 i+ op [5:0] $end
   $var wire  6 s( op_execute [5:0] $end
   $var wire  6 /* op_memory [5:0] $end
   $var wire  6 w* op_writeback [5:0] $end
   $var wire 32 + program_counter_branch_decode [31:0] $end
   $var wire  1 Y# program_counter_multiplexer_jump_decode $end
   $var wire  1 S( program_counter_multiplexer_jump_execute $end
   $var wire  1 u) program_counter_multiplexer_jump_memory $end
   $var wire 32 ; program_counter_mux_1_out [31:0] $end
   $var wire 32 M) program_counter_plus_eight_execute [31:0] $end
   $var wire 32 +( program_counter_plus_four_decode [31:0] $end
   $var wire 32 U) program_counter_plus_four_execute [31:0] $end
   $var wire 32 q' program_counter_plus_four_fetch [31:0] $end
   $var wire 32 3 program_counter_prime [31:0] $end
   $var wire  1 ;$ program_counter_src_decode $end
   $var wire  1 G. read $end
   $var wire  5 q+ read_address_1 [4:0] $end
   $var wire  5 y+ read_address_2 [4:0] $end
   $var wire 32 ;, read_data_writeback [31:0] $end
   $var wire 32 ]! read_data_writeback_filtered [31:0] $end
   $var wire 32 g. readdata [31:0] $end
   $var wire  2 A# register_destination_decode [1:0] $end
   $var wire  2 3( register_destination_execute [1:0] $end
   $var wire 32 o" register_file_output_A_decode [31:0] $end
   $var wire 32 w" register_file_output_B_decode [31:0] $end
   $var wire 32 [, register_file_output_HI_decode [31:0] $end
   $var wire 32 S, register_file_output_LO_decode [31:0] $end
   $var wire 32 /. register_v0 [31:0] $end
   $var wire 32 {$ register_v0_reg_file [31:0] $end
   $var wire  1 !# register_write_decode $end
   $var wire  1 K( register_write_execute $end
   $var wire  1 e) register_write_memory $end
   $var wire  1 _* register_write_writeback $end
   $var wire  1 }- reset $end
   $var wire 32 U! result_writeback [31:0] $end
   $var wire 32 C shifter_output_decode [31:0] $end
   $var wire 32 K sign_imm_decode [31:0] $end
   $var wire 32 E) sign_imm_execute [31:0] $end
   $var wire 32 %! src_A_ALU_execute [31:0] $end
   $var wire 32 W* src_A_ALU_memory [31:0] $end
   $var wire 32 )+ src_A_ALU_writeback [31:0] $end
   $var wire 32 [ src_A_decode [31:0] $end
   $var wire 32 {( src_A_execute [31:0] $end
   $var wire 32 -! src_B_ALU_execute [31:0] $end
   $var wire 32 c src_B_decode [31:0] $end
   $var wire 32 %) src_B_execute [31:0] $end
   $var wire  1 [$ stall_decode $end
   $var wire  1 S$ stall_fetch $end
   $var wire  1 a# using_HI_LO_decode $end
   $var wire  1 c( using_HI_LO_execute $end
   $var wire  1 O. waitrequest $end
   $var wire  1 ?. write $end
   $var wire 32 5! write_data_execute [31:0] $end
   $var wire 32 ?* write_data_memory [31:0] $end
   $var wire  5 # write_register_execute [4:0] $end
   $var wire  5 m) write_register_memory [4:0] $end
   $var wire  5 1+ write_register_writeback [4:0] $end
   $var wire 32 W. writedata [31:0] $end
   $scope module adder_decode $end
    $var wire 32 C a [31:0] $end
    $var wire 32 +( b [31:0] $end
    $var wire 32 + z [31:0] $end
   $upscope $end
   $scope module alu $end
    $var wire 64 W" ALU_HI_LO_output [63:0] $end
    $var wire 32 E! ALU_HI_output [31:0] $end
    $var wire 32 M! ALU_LO_output [31:0] $end
    $var wire  6 C( ALU_operation [5:0] $end
    $var wire 32 =! ALU_output [31:0] $end
    $var wire 64 7" extended_input_1 [63:0] $end
    $var wire 64 G" extended_input_2 [63:0] $end
    $var wire 32 %! input_1 [31:0] $end
    $var wire 32 -! input_2 [31:0] $end
    $var wire  5 m! shift_amount [4:0] $end
    $var wire 64 u! sign_extened_input_1 [63:0] $end
    $var wire 64 '" sign_extened_input_2 [63:0] $end
   $upscope $end
   $scope module alu_input_mux $end
    $var wire 32 E- ALU_HI_output_memory [31:0] $end
    $var wire 32 M- ALU_LO_output_memory [31:0] $end
    $var wire 32 7* ALU_output_memory [31:0] $end
    $var wire  2 ;( ALU_src_B_execute [1:0] $end
    $var wire 32 e- HI_result_writeback [31:0] $end
    $var wire 32 m- LO_result_writeback [31:0] $end
    $var wire  3 k forward_one_execute [2:0] $end
    $var wire  3 s forward_two_execute [2:0] $end
    $var wire 32 M) program_counter_plus_eight_execute [31:0] $end
    $var wire 32 {( read_data_1_reg [31:0] $end
    $var wire 32 %) read_data_2_reg [31:0] $end
    $var wire 32 U! result_writeback [31:0] $end
    $var wire 32 E) sign_imm_execute [31:0] $end
    $var wire 32 %! src_A_ALU_execute [31:0] $end
    $var wire 32 -! src_B_ALU_execute [31:0] $end
    $var wire 32 e! src_mux_input_0 [31:0] $end
    $var wire 32 5! write_data_execute [31:0] $end
   $upscope $end
   $scope module control_unit $end
    $var wire  6 Q# ALU_function [5:0] $end
    $var wire  2 9# ALU_src_B [1:0] $end
    $var wire  1 q# HI_register_write $end
    $var wire  1 y# LO_register_write $end
    $var wire  1 I# branch $end
    $var wire  6 3$ funct [5:0] $end
    $var wire 32 a+ instruction [31:0] $end
    $var wire  1 i# j_instruction $end
    $var wire  1 )# memory_to_register $end
    $var wire  1 1# memory_write $end
    $var wire  6 #$ op [5:0] $end
    $var wire  1 Y# program_counter_multiplexer_jump $end
    $var wire  2 A# register_destination [1:0] $end
    $var wire  1 !# register_write $end
    $var wire  5 +$ rt [4:0] $end
    $var wire  1 a# using_HI_LO $end
   $upscope $end
   $scope module decode_execute_register $end
    $var wire  6 Q# ALU_function_decode [5:0] $end
    $var wire  6 C( ALU_function_execute [5:0] $end
    $var wire  2 9# ALU_src_B_decode [1:0] $end
    $var wire  2 ;( ALU_src_B_execute [1:0] $end
    $var wire  1 #( HALT_decode $end
    $var wire  1 k( HALT_execute $end
    $var wire  1 q# HI_register_write_decode $end
    $var wire  1 s, HI_register_write_execute $end
    $var wire  1 y# LO_register_write_decode $end
    $var wire  1 {, LO_register_write_execute $end
    $var wire  5 #, Rd_decode [4:0] $end
    $var wire  5 =) Rd_execute [4:0] $end
    $var wire  5 q+ Rs_decode [4:0] $end
    $var wire  5 -) Rs_execute [4:0] $end
    $var wire  5 y+ Rt_decode [4:0] $end
    $var wire  5 5) Rt_execute [4:0] $end
    $var wire  1 c$ clear $end
    $var wire  1 Y+ clk $end
    $var wire  1 i# j_instruction_decode $end
    $var wire  1 [( j_instruction_execute $end
    $var wire 32 A+ j_program_counter_decode [31:0] $end
    $var wire 32 ]) j_program_counter_execute [31:0] $end
    $var wire  1 )# memory_to_register_decode $end
    $var wire  1 c, memory_to_register_execute $end
    $var wire  1 1# memory_write_decode $end
    $var wire  1 k, memory_write_execute $end
    $var wire  6 i+ op_decode [5:0] $end
    $var wire  6 s( op_execute [5:0] $end
    $var wire  1 Y# program_counter_multiplexer_jump_decode $end
    $var wire  1 S( program_counter_multiplexer_jump_execute $end
    $var wire 32 +( program_counter_plus_four_decode [31:0] $end
    $var wire 32 U) program_counter_plus_four_execute [31:0] $end
    $var wire  2 A# register_destination_decode [1:0] $end
    $var wire  2 3( register_destination_execute [1:0] $end
    $var wire  1 !# register_write_decode $end
    $var wire  1 K( register_write_execute $end
    $var wire  1 }- reset $end
    $var wire 32 K sign_imm_decode [31:0] $end
    $var wire 32 E) sign_imm_execute [31:0] $end
    $var wire 32 [ src_A_decode [31:0] $end
    $var wire 32 {( src_A_execute [31:0] $end
    $var wire 32 c src_B_decode [31:0] $end
    $var wire 32 %) src_B_execute [31:0] $end
    $var wire  1 a# using_HI_LO_decode $end
    $var wire  1 c( using_HI_LO_execute $end
   $upscope $end
   $scope module execute_memory_register $end
    $var wire 32 E! ALU_HI_output_execute [31:0] $end
    $var wire 32 E- ALU_HI_output_memory [31:0] $end
    $var wire 32 M! ALU_LO_output_execute [31:0] $end
    $var wire 32 M- ALU_LO_output_memory [31:0] $end
    $var wire 32 =! ALU_output_execute [31:0] $end
    $var wire 32 7* ALU_output_memory [31:0] $end
    $var wire  1 k( HALT_execute $end
    $var wire  1 '* HALT_memory $end
    $var wire  1 s, HI_register_write_execute $end
    $var wire  1 5- HI_register_write_memory $end
    $var wire  1 {, LO_register_write_execute $end
    $var wire  1 =- LO_register_write_memory $end
    $var wire  1 Y+ clk $end
    $var wire  1 [( j_instruction_execute $end
    $var wire  1 }) j_instruction_memory $end
    $var wire 32 ]) j_program_counter_execute [31:0] $end
    $var wire 32 O* j_program_counter_memory [31:0] $end
    $var wire  1 c, memory_to_register_execute $end
    $var wire  1 %- memory_to_register_memory $end
    $var wire  1 k, memory_write_execute $end
    $var wire  1 -- memory_write_memory $end
    $var wire  6 s( op_execute [5:0] $end
    $var wire  6 /* op_memory [5:0] $end
    $var wire  1 S( program_counter_multiplexer_jump_execute $end
    $var wire  1 u) program_counter_multiplexer_jump_memory $end
    $var wire  1 K( register_write_execute $end
    $var wire  1 e) register_write_memory $end
    $var wire  1 }- reset $end
    $var wire 32 %! src_A_ALU_execute [31:0] $end
    $var wire 32 W* src_A_ALU_memory [31:0] $end
    $var wire 32 5! write_data_execute [31:0] $end
    $var wire 32 ?* write_data_memory [31:0] $end
    $var wire  5 # write_register_execute [4:0] $end
    $var wire  5 m) write_register_memory [4:0] $end
   $upscope $end
   $scope module fetch_decode_register $end
    $var wire  1 #( HALT_decode $end
    $var wire  1 y' HALT_fetch $end
    $var wire  1 ;$ clear $end
    $var wire  1 Y+ clk $end
    $var wire  1 [$ enable $end
    $var wire 32 +( program_counter_plus_four_decode [31:0] $end
    $var wire 32 q' program_counter_plus_four_fetch [31:0] $end
    $var wire  1 }- reset $end
   $upscope $end
   $scope module hazard_unit $end
    $var wire  1 5- HI_register_write_memory $end
    $var wire  1 U- HI_register_write_writeback $end
    $var wire  1 =- LO_register_write_memory $end
    $var wire  1 ]- LO_register_write_writeback $end
    $var wire  5 q+ Rs_decode [4:0] $end
    $var wire  5 -) Rs_execute [4:0] $end
    $var wire  5 y+ Rt_decode [4:0] $end
    $var wire  5 5) Rt_execute [4:0] $end
    $var wire  1 I# branch_decode $end
    $var wire  1 s$ branchstall $end
    $var wire  1 c$ flush_execute_register $end
    $var wire  1 I+ forward_register_file_output_A_decode $end
    $var wire  3 k forward_register_file_output_A_execute [2:0] $end
    $var wire  1 Q+ forward_register_file_output_B_decode $end
    $var wire  3 s forward_register_file_output_B_execute [2:0] $end
    $var wire  1 k$ lwstall $end
    $var wire  1 c, memory_to_register_execute $end
    $var wire  1 %- memory_to_register_memory $end
    $var wire  1 S( program_counter_multiplexer_jump_execute $end
    $var wire  1 K( register_write_execute $end
    $var wire  1 e) register_write_memory $end
    $var wire  1 _* register_write_writeback $end
    $var wire  1 [$ stall_decode $end
    $var wire  1 S$ stall_fetch $end
    $var wire  1 c( using_HI_LO_execute $end
    $var wire  5 # write_register_execute [4:0] $end
    $var wire  5 m) write_register_memory [4:0] $end
    $var wire  5 1+ write_register_writeback [4:0] $end
   $upscope $end
   $scope module memory_filter $end
    $var wire  4 !+ byteenable_writeback [3:0] $end
    $var wire 32 ]! filtered_output_writeback [31:0] $end
    $var wire  6 w* op_writeback [5:0] $end
    $var wire 32 ;, read_data_writeback [31:0] $end
    $var wire  1 }- reset $end
    $var wire 32 )+ src_A_writeback [31:0] $end
    $var wire 32 g" temp_filtered [31:0] $end
   $upscope $end
   $scope module memory_writeback_register $end
    $var wire 32 E- ALU_HI_output_memory [31:0] $end
    $var wire 32 e- ALU_HI_output_writeback [31:0] $end
    $var wire 32 M- ALU_LO_output_memory [31:0] $end
    $var wire 32 m- ALU_LO_output_writeback [31:0] $end
    $var wire 32 7* ALU_output_memory [31:0] $end
    $var wire 32 9+ ALU_output_writeback [31:0] $end
    $var wire  1 '* HALT_memory $end
    $var wire  1 o* HALT_writeback $end
    $var wire  1 5- HI_register_write_memory $end
    $var wire  1 U- HI_register_write_writeback $end
    $var wire  1 =- LO_register_write_memory $end
    $var wire  1 ]- LO_register_write_writeback $end
    $var wire  4 { byteenable_memory [3:0] $end
    $var wire  4 !+ byteenable_writeback [3:0] $end
    $var wire  1 Y+ clk $end
    $var wire  1 %- memory_to_register_memory $end
    $var wire  1 g* memory_to_register_writeback $end
    $var wire  6 /* op_memory [5:0] $end
    $var wire  6 w* op_writeback [5:0] $end
    $var wire  1 e) register_write_memory $end
    $var wire  1 _* register_write_writeback $end
    $var wire  1 }- reset $end
    $var wire 32 W* src_A_ALU_memory [31:0] $end
    $var wire 32 )+ src_A_ALU_writeback [31:0] $end
    $var wire  5 m) write_register_memory [4:0] $end
    $var wire  5 1+ write_register_writeback [4:0] $end
   $upscope $end
   $scope module pc $end
    $var wire 32 3 address_input [31:0] $end
    $var wire 32 i' address_output [31:0] $end
    $var wire  1 Y+ clk $end
    $var wire  1 S$ enable $end
    $var wire  1 y' halt $end
    $var wire  1 }- reset $end
   $upscope $end
   $scope module plus_four_adder $end
    $var wire 32 i' a [31:0] $end
    $var wire 32 w. b [31:0] $end
    $var wire 32 q' z [31:0] $end
   $upscope $end
   $scope module plus_four_adder_execute $end
    $var wire 32 w. a [31:0] $end
    $var wire 32 U) b [31:0] $end
    $var wire 32 M) z [31:0] $end
   $upscope $end
   $scope module program_counter_multiplexer $end
    $var wire 32 !/ BUS_WIDTH [31:0] $end
    $var wire  1 ;$ control $end
    $var wire 32 q' input_0 [31:0] $end
    $var wire 32 + input_1 [31:0] $end
    $var wire 32 ; resolved [31:0] $end
   $upscope $end
   $scope module program_counter_multiplexer_two $end
    $var wire 32 !/ BUS_WIDTH [31:0] $end
    $var wire  1 u) control $end
    $var wire 32 ; input_0 [31:0] $end
    $var wire 32 G* input_1 [31:0] $end
    $var wire 32 3 resolved [31:0] $end
   $upscope $end
   $scope module reg_output_comparator $end
    $var wire 32 C$ a [31:0] $end
    $var wire 32 K$ b [31:0] $end
    $var wire  1 S c $end
    $var wire  6 i+ op [5:0] $end
    $var wire  5 y+ rt [4:0] $end
   $upscope $end
   $scope module register_file $end
    $var wire 32 [, HI_reg [31:0] $end
    $var wire 32 e- HI_write_data [31:0] $end
    $var wire  1 U- HI_write_enable $end
    $var wire 32 S, LO_reg [31:0] $end
    $var wire 32 m- LO_write_data [31:0] $end
    $var wire  1 ]- LO_write_enable $end
    $var wire  1 Y+ clk $end
    $var wire  1 K, modified_write_clk $end
    $var wire  1 o. pipelined $end
    $var wire  5 q+ read_address_1 [4:0] $end
    $var wire  5 y+ read_address_2 [4:0] $end
    $var wire 32 o" read_data_1 [31:0] $end
    $var wire 32 w" read_data_2 [31:0] $end
    $var wire 32 [, read_data_HI [31:0] $end
    $var wire 32 S, read_data_LO [31:0] $end
    $var wire 32 {$ read_register_2 [31:0] $end
    $var wire 32 %% registers(0) [31:0] $end
    $var wire 32 &% registers(1) [31:0] $end
    $var wire 32 /% registers(10) [31:0] $end
    $var wire 32 0% registers(11) [31:0] $end
    $var wire 32 1% registers(12) [31:0] $end
    $var wire 32 2% registers(13) [31:0] $end
    $var wire 32 3% registers(14) [31:0] $end
    $var wire 32 4% registers(15) [31:0] $end
    $var wire 32 5% registers(16) [31:0] $end
    $var wire 32 6% registers(17) [31:0] $end
    $var wire 32 7% registers(18) [31:0] $end
    $var wire 32 8% registers(19) [31:0] $end
    $var wire 32 '% registers(2) [31:0] $end
    $var wire 32 9% registers(20) [31:0] $end
    $var wire 32 :% registers(21) [31:0] $end
    $var wire 32 ;% registers(22) [31:0] $end
    $var wire 32 <% registers(23) [31:0] $end
    $var wire 32 =% registers(24) [31:0] $end
    $var wire 32 >% registers(25) [31:0] $end
    $var wire 32 ?% registers(26) [31:0] $end
    $var wire 32 @% registers(27) [31:0] $end
    $var wire 32 A% registers(28) [31:0] $end
    $var wire 32 B% registers(29) [31:0] $end
    $var wire 32 (% registers(3) [31:0] $end
    $var wire 32 C% registers(30) [31:0] $end
    $var wire 32 D% registers(31) [31:0] $end
    $var wire 32 )% registers(4) [31:0] $end
    $var wire 32 *% registers(5) [31:0] $end
    $var wire 32 +% registers(6) [31:0] $end
    $var wire 32 ,% registers(7) [31:0] $end
    $var wire 32 -% registers(8) [31:0] $end
    $var wire 32 .% registers(9) [31:0] $end
    $var wire  5 1+ write_address [4:0] $end
    $var wire 32 U! write_data [31:0] $end
    $var wire  1 _* write_enable $end
   $upscope $end
   $scope module write_register_execute_mux $end
    $var wire 32 )/ BUS_WIDTH [31:0] $end
    $var wire  2 3( control [1:0] $end
    $var wire  5 5) input_0 [4:0] $end
    $var wire  5 =) input_1 [4:0] $end
    $var wire  5 1/ input_2 [4:0] $end
    $var wire  5 9/ input_3 [4:0] $end
    $var wire  5 # resolved [4:0] $end
   $upscope $end
   $scope module writeback_mux $end
    $var wire 32 !/ BUS_WIDTH [31:0] $end
    $var wire  1 g* control $end
    $var wire 32 9+ input_0 [31:0] $end
    $var wire 32 ]! input_1 [31:0] $end
    $var wire 32 U! resolved [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#2
b00000 #
b10111111110000000000000000000100 +
b10111111110000000000000000000100 3
b10111111110000000000000000000100 ;
b00000000000000000000000000000000 C
b00000000000000000000000000000000 K
0S
b00000000000000000000000000000000 [
b00000000000000000000000000000000 c
b000 k
b000 s
b1111 {
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 5!
b00000000000000000000000000000000 =!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 U!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 e!
b00000 m!
b0000000000000000000000000000000000000000000000000000000000000000 u!
b0000000000000000000000000000000000000000000000000000000000000000 '"
b0000000000000000000000000000000000000000000000000000000000000000 7"
b0000000000000000000000000000000000000000000000000000000000000000 G"
b0000000000000000000000000000000000000000000000000000000000000000 W"
b00000000000000000000000000000000 g"
b00000000000000000000000000000000 o"
b00000000000000000000000000000000 w"
1!#
0)#
01#
b00 9#
b01 A#
0I#
b000000 Q#
0Y#
0a#
0i#
0q#
0y#
b000000 #$
b00000 +$
b000000 3$
0;$
b00000000000000000000000000000000 C$
b00000000000000000000000000000000 K$
0S$
0[$
0c$
0k$
0s$
b00000000000000000000000000000000 {$
b00000000000000000000000000000000 %%
b00000000000000000000000000000000 &%
b00000000000000000000000000000000 '%
b00000000000000000000000000000000 (%
b00000000000000000000000000000000 )%
b00000000000000000000000000000000 *%
b00000000000000000000000000000000 +%
b00000000000000000000000000000000 ,%
b00000000000000000000000000000000 -%
b00000000000000000000000000000000 .%
b00000000000000000000000000000000 /%
b00000000000000000000000000000000 0%
b00000000000000000000000000000000 1%
b00000000000000000000000000000000 2%
b00000000000000000000000000000000 3%
b00000000000000000000000000000000 4%
b00000000000000000000000000000000 5%
b00000000000000000000000000000000 6%
b00000000000000000000000000000000 7%
b00000000000000000000000000000000 8%
b00000000000000000000000000000000 9%
b00000000000000000000000000000000 :%
b00000000000000000000000000000000 ;%
b00000000000000000000000000000000 <%
b00000000000000000000000000000000 =%
b00000000000000000000000000000000 >%
b00000000000000000000000000000000 ?%
b00000000000000000000000000000000 @%
b00000000000000000000000000000000 A%
b00000000000000000000000000000000 B%
b00000000000000000000000000000000 C%
b00000000000000000000000000000000 D%
b10111111110000000000000000000000 i'
b10111111110000000000000000000100 q'
0y'
0#(
b10111111110000000000000000000100 +(
b00 3(
b00 ;(
b000000 C(
0K(
0S(
0[(
0c(
0k(
b000000 s(
b00000000000000000000000000000000 {(
b00000000000000000000000000000000 %)
b00000 -)
b00000 5)
b00000 =)
b00000000000000000000000000000000 E)
b00000000000000000000000000000100 M)
b00000000000000000000000000000000 U)
b00000000000000000000000000000000 ])
0e)
b00000 m)
0u)
0})
0'*
b000000 /*
b00000000000000000000000000000000 7*
b00000000000000000000000000000000 ?*
b00000000000000000000000000000000 G*
b00000000000000000000000000000000 O*
b00000000000000000000000000000000 W*
0_*
0g*
0o*
b000000 w*
b0000 !+
b00000000000000000000000000000000 )+
b00000 1+
b00000000000000000000000000000000 9+
b10110000000000000000000000000000 A+
0I+
0Q+
0Y+
b00000000000000000000000000000000 a+
b000000 i+
b00000 q+
b00000 y+
b00000 #,
b0000000000000000 +,
b00000000000000000000000000 3,
b00000000000000000000000000000000 ;,
b11 C,
1K,
b00000000000000000000000000000000 S,
b00000000000000000000000000000000 [,
0c,
0k,
0s,
0{,
0%-
0--
05-
0=-
b00000000000000000000000000000000 E-
b00000000000000000000000000000000 M-
0U-
0]-
b00000000000000000000000000000000 e-
b00000000000000000000000000000000 m-
0u-
1}-
1'.
b00000000000000000000000000000000 /.
b10111111110000000000000000000000 7.
0?.
0G.
0O.
b00000000000000000000000000000000 W.
b1111 _.
b00000000000000000000000000000000 g.
1o.
b00000000000000000000000000000100 w.
b00000000000000000000000000100000 !/
b00000000000000000000000000000101 )/
b11111 1/
b00000 9/
#3
#4
b00 C,
1u-
0}-
1G.
#5
#6
0u-
#7
#8
b10111111110000000000000000001000 3
b10111111110000000000000000001000 ;
b10111111110000000000000000000100 i'
b10111111110000000000000000001000 q'
b01 3(
1K(
b10111111110000000000000000001000 M)
b10111111110000000000000000000100 U)
b10110000000000000000000000000000 ])
b1111 !+
1Y+
0K,
1u-
b10111111110000000000000000000100 7.
#9
#10
0Y+
1K,
0u-
#11
#12
b10111111110000000000000000001000 +
b10111111110000000000000000001100 3
b10111111110000000000000000001100 ;
b10111111110000000000000000001000 i'
b10111111110000000000000000001100 q'
b10111111110000000000000000001000 +(
1e)
b10110000000000000000000000000000 O*
1Y+
0K,
1u-
b10111111110000000000000000001000 7.
#13
#14
0Y+
1K,
0u-
#15
#16
b10111111110000000000000000001100 +
b10111111110000000000000000010000 3
b10111111110000000000000000010000 ;
b10111111110000000000000000001100 i'
b10111111110000000000000000010000 q'
b10111111110000000000000000001100 +(
b10111111110000000000000000001100 M)
b10111111110000000000000000001000 U)
1_*
1Y+
0K,
1u-
b10111111110000000000000000001100 7.
#17
#18
0Y+
1K,
0u-
b00010000000000000000000100000000 g.
#19
#20
b10111111110000000000010000001100 +
b10111111110000000000010000001100 3
b10111111110000000000010000001100 ;
b00000000000000000000010000000000 C
b00000000000000000000000100000000 K
1S
0!#
b00 A#
1I#
b111111 Q#
b000100 #$
1;$
b00 3(
0K(
b00000000000000000000000000000100 M)
b00000000000000000000000000000000 U)
b00000000000000000000000000000000 ])
b10110000000000000000010000000000 A+
1Y+
b00010000000000000000000100000000 a+
b000100 i+
b0000000100000000 +,
b00000000000000000100000000 3,
0K,
1u-
#21
#22
0Y+
1K,
0u-
#23
#24
b10111111110000000000000000010000 +
b10111111110000000000000000010100 3
b10111111110000000000000000010100 ;
b00000000000000000000000000000000 C
b00000000000000000000000000000000 K
0S
1!#
b01 A#
0I#
b000000 Q#
b000000 #$
0;$
b10111111110000000000000000010000 i'
b10111111110000000000000000010100 q'
b10111111110000000000000000010000 +(
b01 3(
1K(
b10111111110000000000000000010000 M)
b10111111110000000000000000001100 U)
b10110000000000000000000000000000 ])
0e)
b00000000000000000000000000000000 O*
b10110000000000000000000000000000 A+
1Y+
b00000000000000000000000000000000 a+
b000000 i+
b0000000000000000 +,
b00000000000000000000000000 3,
0K,
1u-
b10111111110000000000000000010000 7.
#25
#26
0Y+
1K,
0u-
b00000000000000000000000000000000 g.
#27
#28
b10111111110000000000000000010100 +
b10111111110000000000000000011000 3
b10111111110000000000000000011000 ;
b10111111110000000000000000010100 i'
b10111111110000000000000000011000 q'
b10111111110000000000000000010100 +(
b10111111110000000000000000010100 M)
b10111111110000000000000000010000 U)
1e)
b10110000000000000000000000000000 O*
0_*
1Y+
0K,
1u-
b10111111110000000000000000010100 7.
#29
#30
0Y+
1K,
0u-
b00001000000000000000000100000000 g.
#31
#32
b10111111110000000000010000010100 +
b00000000000000000000010000000000 C
b00000000000000000000000100000000 K
0!#
b10 9#
b10 A#
1I#
b111111 Q#
1Y#
1i#
b000010 #$
b00 3(
0K(
b00000000000000000000000000000100 M)
b00000000000000000000000000000000 U)
b00000000000000000000000000000000 ])
1_*
b10110000000000000000010000000000 A+
1Y+
b00001000000000000000000100000000 a+
b000010 i+
b0000000100000000 +,
b00000000000000000100000000 3,
0K,
1u-
#33
#34
0Y+
1K,
0u-
#35
#36
b11111 #
b10111111110000000000010000011000 +
b10111111110000000000000000011100 3
b10111111110000000000000000011100 ;
b10111111110000000000000000011000 -!
b10111111110000000000000000011000 =!
b1111111111111111111111111111111110111111110000000000000000011000 '"
b0000000000000000000000000000000010111111110000000000000000011000 G"
1S$
1[$
b10111111110000000000000000011000 i'
b10111111110000000000000000011100 q'
b10111111110000000000000000011000 +(
b10 3(
b10 ;(
b111111 C(
1S(
1[(
b000010 s(
b00000000000000000000000100000000 E)
b10111111110000000000000000011000 M)
b10111111110000000000000000010100 U)
b10110000000000000000010000000000 ])
0e)
b00000000000000000000000000000000 O*
1Y+
0K,
1u-
b10111111110000000000000000011000 7.
#37
#38
0Y+
1K,
0u-
b00000000000000000000000000000000 g.
#39
#40
b10110000000000000000010000000000 3
b10111111110000000000000000011100 -!
b10111111110000000000000000011100 =!
b1111111111111111111111111111111110111111110000000000000000011100 '"
b0000000000000000000000000000000010111111110000000000000000011100 G"
b10111111110000000000000000011100 M)
b10111111110000000000000000011000 U)
b11111 m)
1u)
1})
b000010 /*
b10111111110000000000000000011000 7*
b10110000000000000000010000000000 G*
b10110000000000000000010000000000 O*
0_*
1Y+
0K,
1u-
#41
#42
0Y+
1K,
0u-
#43
#44
b10111111110000000000000000011000 U!
b10111111110000000000000000011100 7*
b000010 w*
b11111 1+
b10111111110000000000000000011000 9+
1Y+
0K,
1u-
#45
#46
0Y+
1K,
0u-
#47
#48
b10111111110000000000000000011100 U!
b10111111110000000000000000011100 9+
1Y+
0K,
1u-
#49
#50
0Y+
1K,
0u-
#51
#52
1Y+
0K,
1u-
#53
#54
0Y+
1K,
0u-
#55
#56
1Y+
0K,
1u-
#57
#58
0Y+
1K,
0u-
#59
#60
1Y+
0K,
1u-
#61
#62
0Y+
1K,
0u-
#63
#64
1Y+
0K,
1u-
#65
#66
0Y+
1K,
0u-
#67
#68
1Y+
0K,
1u-
#69
#70
0Y+
1K,
0u-
#71
#72
1Y+
0K,
1u-
#73
#74
0Y+
1K,
0u-
#75
#76
1Y+
0K,
1u-
#77
#78
0Y+
1K,
0u-
#79
#80
1Y+
0K,
1u-
#81
#82
0Y+
1K,
0u-
#83
#84
1Y+
0K,
1u-
#85
#86
0Y+
1K,
0u-
#87
#88
1Y+
0K,
1u-
#89
#90
0Y+
1K,
0u-
#91
#92
1Y+
0K,
1u-
#93
#94
0Y+
1K,
0u-
#95
#96
1Y+
0K,
1u-
#97
#98
0Y+
1K,
0u-
#99
#100
1Y+
0K,
1u-
#101
#102
0Y+
1K,
0u-
#103
#104
1Y+
0K,
1u-
#105
#106
0Y+
1K,
0u-
#107
#108
1Y+
0K,
1u-
#109
#110
0Y+
1K,
0u-
#111
#112
1Y+
0K,
1u-
#113
#114
0Y+
1K,
0u-
#115
#116
1Y+
0K,
1u-
#117
#118
0Y+
1K,
0u-
#119
#120
1Y+
0K,
1u-
#121
#122
0Y+
1K,
0u-
#123
#124
1Y+
0K,
1u-
#125
#126
0Y+
1K,
0u-
#127
#128
1Y+
0K,
1u-
#129
#130
0Y+
1K,
0u-
#131
#132
1Y+
0K,
1u-
#133
#134
0Y+
1K,
0u-
#135
#136
1Y+
0K,
1u-
#137
#138
0Y+
1K,
0u-
#139
#140
1Y+
0K,
1u-
#141
#142
0Y+
1K,
0u-
#143
#144
1Y+
0K,
1u-
#145
#146
0Y+
1K,
0u-
#147
#148
1Y+
0K,
1u-
#149
#150
0Y+
1K,
0u-
#151
#152
1Y+
0K,
1u-
#153
#154
0Y+
1K,
0u-
#155
#156
1Y+
0K,
1u-
#157
#158
0Y+
1K,
0u-
#159
#160
1Y+
0K,
1u-
#161
#162
0Y+
1K,
0u-
#163
#164
1Y+
0K,
1u-
#165
#166
0Y+
1K,
0u-
#167
#168
1Y+
0K,
1u-
#169
#170
0Y+
1K,
0u-
#171
#172
1Y+
0K,
1u-
#173
#174
0Y+
1K,
0u-
#175
#176
1Y+
0K,
1u-
#177
#178
0Y+
1K,
0u-
#179
#180
1Y+
0K,
1u-
#181
#182
0Y+
1K,
0u-
#183
#184
1Y+
0K,
1u-
#185
#186
0Y+
1K,
0u-
#187
#188
1Y+
0K,
1u-
#189
#190
0Y+
1K,
0u-
#191
#192
1Y+
0K,
1u-
#193
#194
0Y+
1K,
0u-
#195
#196
1Y+
0K,
1u-
#197
#198
0Y+
1K,
0u-
#199
#200
1Y+
0K,
1u-
#201
#202
0Y+
1K,
0u-
#203
