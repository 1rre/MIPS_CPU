$version Generated by VerilatedVcd $end
$date Sun Dec 13 15:36:03 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 E- active $end
  $var wire 32 U- address [31:0] $end
  $var wire  4 }- byteenable [3:0] $end
  $var wire  1 5- clk $end
  $var wire  1 e- read $end
  $var wire 32 '. readdata [31:0] $end
  $var wire 32 M- register_v0 [31:0] $end
  $var wire  1 =- reset $end
  $var wire  1 m- waitrequest $end
  $var wire  1 ]- write $end
  $var wire 32 u- writedata [31:0] $end
  $scope module mips_cpu_bus $end
   $var wire 32 { ALU_HI_output_execute [31:0] $end
   $var wire 32 c, ALU_HI_output_memory [31:0] $end
   $var wire 32 %- ALU_HI_output_writeback [31:0] $end
   $var wire 32 %! ALU_LO_output_execute [31:0] $end
   $var wire 32 k, ALU_LO_output_memory [31:0] $end
   $var wire 32 -- ALU_LO_output_writeback [31:0] $end
   $var wire  6 !# ALU_function_decode [5:0] $end
   $var wire  6 y' ALU_function_execute [5:0] $end
   $var wire 32 s ALU_output_execute [31:0] $end
   $var wire 32 ]) ALU_output_memory [31:0] $end
   $var wire 32 m) ALU_output_memory_resolved [31:0] $end
   $var wire 32 ?* ALU_output_writeback [31:0] $end
   $var wire  2 g" ALU_src_B_decode [1:0] $end
   $var wire  2 q' ALU_src_B_execute [1:0] $end
   $var wire  1 Y' HALT_decode $end
   $var wire  1 C( HALT_execute $end
   $var wire  1 Q' HALT_fetch $end
   $var wire  1 U) HALT_memory $end
   $var wire  1 /* HALT_writeback $end
   $var wire  1 A# HI_register_write_decode $end
   $var wire  1 3, HI_register_write_execute $end
   $var wire  1 S, HI_register_write_memory $end
   $var wire  1 s, HI_register_write_writeback $end
   $var wire  1 I# LO_register_write_decode $end
   $var wire  1 ;, LO_register_write_execute $end
   $var wire  1 [, LO_register_write_memory $end
   $var wire  1 {, LO_register_write_writeback $end
   $var wire  5 A+ Rd_decode [4:0] $end
   $var wire  5 k( Rd_execute [4:0] $end
   $var wire  5 1+ Rs_decode [4:0] $end
   $var wire  5 [( Rs_execute [4:0] $end
   $var wire  5 9+ Rt_decode [4:0] $end
   $var wire  5 c( Rt_execute [4:0] $end
   $var wire  1 w* STALL $end
   $var wire  1 E- active $end
   $var wire 32 U- address [31:0] $end
   $var wire  1 w" branch_decode $end
   $var wire  4 }- byteenable [3:0] $end
   $var wire  1 5- clk $end
   $var wire 32 #$ comparator_1 [31:0] $end
   $var wire 32 +$ comparator_2 [31:0] $end
   $var wire 32 ]) data_address [31:0] $end
   $var wire  1 C, data_read $end
   $var wire  1 a+ data_read_write $end
   $var wire  1 K, data_write $end
   $var wire  1 y# equal_decode $end
   $var wire  1 C$ flush_execute_register $end
   $var wire  1 _* forward_A_decode $end
   $var wire  3 -! forward_A_execute [2:0] $end
   $var wire  1 g* forward_B_decode $end
   $var wire  3 5! forward_B_execute [2:0] $end
   $var wire 16 I+ immediate [15:0] $end
   $var wire 32 A' instr_address [31:0] $end
   $var wire 32 !+ instruction_decode [31:0] $end
   $var wire  1 o* internal_clk $end
   $var wire  1 9# j_instruction_decode $end
   $var wire  1 3( j_instruction_execute $end
   $var wire  1 M) j_instruction_memory $end
   $var wire 26 Q+ j_offset [25:0] $end
   $var wire 32 W* j_program_counter_decode [31:0] $end
   $var wire 32 -) j_program_counter_execute [31:0] $end
   $var wire 32 u) j_program_counter_memory [31:0] $end
   $var wire  1 W" memory_to_register_decode $end
   $var wire  1 #, memory_to_register_execute $end
   $var wire  1 C, memory_to_register_memory $end
   $var wire  1 '* memory_to_register_writeback $end
   $var wire  1 _" memory_write_decode $end
   $var wire  1 +, memory_write_execute $end
   $var wire  1 K, memory_write_memory $end
   $var wire  6 )+ op [5:0] $end
   $var wire 32 3 program_counter_branch_decode [31:0] $end
   $var wire 32 A' program_counter_fetch [31:0] $end
   $var wire  1 )# program_counter_multiplexer_jump_decode $end
   $var wire  1 +( program_counter_multiplexer_jump_execute $end
   $var wire  1 E) program_counter_multiplexer_jump_memory $end
   $var wire 32 ; program_counter_mux_1_out [31:0] $end
   $var wire 32 {( program_counter_plus_eight_execute [31:0] $end
   $var wire 32 a' program_counter_plus_four_decode [31:0] $end
   $var wire 32 %) program_counter_plus_four_execute [31:0] $end
   $var wire 32 I' program_counter_plus_four_fetch [31:0] $end
   $var wire 32 i# program_counter_prime [31:0] $end
   $var wire  1 q# program_counter_src_decode $end
   $var wire  1 e- read $end
   $var wire  5 1+ read_address_1 [4:0] $end
   $var wire  5 9+ read_address_2 [4:0] $end
   $var wire 32 Y+ read_data_memory [31:0] $end
   $var wire 32 G* read_data_writeback [31:0] $end
   $var wire 32 '. readdata [31:0] $end
   $var wire  2 o" register_destination_decode [1:0] $end
   $var wire  2 i' register_destination_execute [1:0] $end
   $var wire 32 ?" register_file_output_A_decode [31:0] $end
   $var wire 32 G" register_file_output_B_decode [31:0] $end
   $var wire 32 y+ register_file_output_HI_decode [31:0] $end
   $var wire 32 q+ register_file_output_LO_decode [31:0] $end
   $var wire 32 M- register_v0 [31:0] $end
   $var wire  1 O" register_write_decode $end
   $var wire  1 #( register_write_execute $end
   $var wire  1 5) register_write_memory $end
   $var wire  1 }) register_write_writeback $end
   $var wire  1 =- reset $end
   $var wire 32 + result_writeback [31:0] $end
   $var wire 32 C shifter_output_decode [31:0] $end
   $var wire 32 K sign_imm_decode [31:0] $end
   $var wire 32 s( sign_imm_execute [31:0] $end
   $var wire 32 c src_A_ALU_execute [31:0] $end
   $var wire 32 S src_A_decode [31:0] $end
   $var wire 32 K( src_A_execute [31:0] $end
   $var wire 32 k src_B_ALU_execute [31:0] $end
   $var wire 32 [ src_B_decode [31:0] $end
   $var wire 32 S( src_B_execute [31:0] $end
   $var wire  1 ;$ stall_decode $end
   $var wire  1 3$ stall_fetch $end
   $var wire  1 1# using_HI_LO_decode $end
   $var wire  1 ;( using_HI_LO_execute $end
   $var wire  1 m- waitrequest $end
   $var wire  1 ]- write $end
   $var wire 32 /. write_data_execute [31:0] $end
   $var wire 32 e) write_data_memory [31:0] $end
   $var wire  5 # write_register_execute [4:0] $end
   $var wire  5 =) write_register_memory [4:0] $end
   $var wire  5 7* write_register_writeback [4:0] $end
   $var wire 32 u- writedata [31:0] $end
   $scope module adder_decode $end
    $var wire 32 C a [31:0] $end
    $var wire 32 a' b [31:0] $end
    $var wire 32 3 z [31:0] $end
   $upscope $end
   $scope module alu $end
    $var wire 64 /" ALU_HI_LO_output [63:0] $end
    $var wire 32 { ALU_HI_output [31:0] $end
    $var wire 32 %! ALU_LO_output [31:0] $end
    $var wire  6 y' ALU_operation [5:0] $end
    $var wire 32 s ALU_output [31:0] $end
    $var wire 64 m! extended_input_1 [63:0] $end
    $var wire 64 }! extended_input_2 [63:0] $end
    $var wire 32 c input_1 [31:0] $end
    $var wire 32 k input_2 [31:0] $end
    $var wire  5 E! shift_amount [4:0] $end
    $var wire 64 M! sign_extened_input_1 [63:0] $end
    $var wire 64 ]! sign_extened_input_2 [63:0] $end
   $upscope $end
   $scope module alu_input_mux $end
    $var wire 32 c, ALU_HI_output_memory [31:0] $end
    $var wire 32 k, ALU_LO_output_memory [31:0] $end
    $var wire 32 ]) ALU_output_memory [31:0] $end
    $var wire  2 q' ALU_src_B_execute [1:0] $end
    $var wire 32 %- HI_result_writeback [31:0] $end
    $var wire 32 -- LO_result_writeback [31:0] $end
    $var wire  3 -! forward_one_execute [2:0] $end
    $var wire  3 5! forward_two_execute [2:0] $end
    $var wire 32 {( program_counter_plus_eight_execute [31:0] $end
    $var wire 32 K( read_data_1_reg [31:0] $end
    $var wire 32 S( read_data_2_reg [31:0] $end
    $var wire 32 + result_writeback [31:0] $end
    $var wire 32 s( sign_imm_execute [31:0] $end
    $var wire 32 c src_A_ALU_execute [31:0] $end
    $var wire 32 k src_B_ALU_execute [31:0] $end
    $var wire 32 =! src_mux_input_0 [31:0] $end
   $upscope $end
   $scope module control_unit $end
    $var wire  6 !# ALU_function [5:0] $end
    $var wire  2 g" ALU_src_B [1:0] $end
    $var wire  1 A# HI_register_write $end
    $var wire  1 I# LO_register_write $end
    $var wire  1 w" branch $end
    $var wire  6 a# funct [5:0] $end
    $var wire 32 !+ instruction [31:0] $end
    $var wire  1 9# j_instruction $end
    $var wire  1 W" memory_to_register $end
    $var wire  1 _" memory_write $end
    $var wire  6 Q# op [5:0] $end
    $var wire  1 )# program_counter_multiplexer_jump $end
    $var wire  2 o" register_destination [1:0] $end
    $var wire  1 O" register_write $end
    $var wire  5 Y# rt [4:0] $end
    $var wire  1 1# using_HI_LO $end
   $upscope $end
   $scope module decode_execute_register $end
    $var wire  6 !# ALU_function_decode [5:0] $end
    $var wire  6 y' ALU_function_execute [5:0] $end
    $var wire  2 g" ALU_src_B_decode [1:0] $end
    $var wire  2 q' ALU_src_B_execute [1:0] $end
    $var wire  1 Y' HALT_decode $end
    $var wire  1 C( HALT_execute $end
    $var wire  1 A# HI_register_write_decode $end
    $var wire  1 3, HI_register_write_execute $end
    $var wire  1 I# LO_register_write_decode $end
    $var wire  1 ;, LO_register_write_execute $end
    $var wire  5 A+ Rd_decode [4:0] $end
    $var wire  5 k( Rd_execute [4:0] $end
    $var wire  5 1+ Rs_decode [4:0] $end
    $var wire  5 [( Rs_execute [4:0] $end
    $var wire  5 9+ Rt_decode [4:0] $end
    $var wire  5 c( Rt_execute [4:0] $end
    $var wire  1 C$ clear $end
    $var wire  1 o* clk $end
    $var wire  1 9# j_instruction_decode $end
    $var wire  1 3( j_instruction_execute $end
    $var wire 32 W* j_program_counter_decode [31:0] $end
    $var wire 32 -) j_program_counter_execute [31:0] $end
    $var wire  1 W" memory_to_register_decode $end
    $var wire  1 #, memory_to_register_execute $end
    $var wire  1 _" memory_write_decode $end
    $var wire  1 +, memory_write_execute $end
    $var wire  1 )# program_counter_multiplexer_jump_decode $end
    $var wire  1 +( program_counter_multiplexer_jump_execute $end
    $var wire 32 a' program_counter_plus_four_decode [31:0] $end
    $var wire 32 %) program_counter_plus_four_execute [31:0] $end
    $var wire  2 o" register_destination_decode [1:0] $end
    $var wire  2 i' register_destination_execute [1:0] $end
    $var wire  1 O" register_write_decode $end
    $var wire  1 #( register_write_execute $end
    $var wire  1 =- reset $end
    $var wire 32 K sign_imm_decode [31:0] $end
    $var wire 32 s( sign_imm_execute [31:0] $end
    $var wire 32 S src_A_decode [31:0] $end
    $var wire 32 K( src_A_execute [31:0] $end
    $var wire 32 [ src_B_decode [31:0] $end
    $var wire 32 S( src_B_execute [31:0] $end
    $var wire  1 1# using_HI_LO_decode $end
    $var wire  1 ;( using_HI_LO_execute $end
   $upscope $end
   $scope module execute_memory_register $end
    $var wire 32 { ALU_HI_output_execute [31:0] $end
    $var wire 32 c, ALU_HI_output_memory [31:0] $end
    $var wire 32 %! ALU_LO_output_execute [31:0] $end
    $var wire 32 k, ALU_LO_output_memory [31:0] $end
    $var wire 32 s ALU_output_execute [31:0] $end
    $var wire 32 ]) ALU_output_memory [31:0] $end
    $var wire  1 C( HALT_execute $end
    $var wire  1 U) HALT_memory $end
    $var wire  1 3, HI_register_write_execute $end
    $var wire  1 S, HI_register_write_memory $end
    $var wire  1 ;, LO_register_write_execute $end
    $var wire  1 [, LO_register_write_memory $end
    $var wire  1 o* clk $end
    $var wire  1 3( j_instruction_execute $end
    $var wire  1 M) j_instruction_memory $end
    $var wire 32 -) j_program_counter_execute [31:0] $end
    $var wire 32 u) j_program_counter_memory [31:0] $end
    $var wire  1 #, memory_to_register_execute $end
    $var wire  1 C, memory_to_register_memory $end
    $var wire  1 +, memory_write_execute $end
    $var wire  1 K, memory_write_memory $end
    $var wire  1 +( program_counter_multiplexer_jump_execute $end
    $var wire  1 E) program_counter_multiplexer_jump_memory $end
    $var wire  1 #( register_write_execute $end
    $var wire  1 5) register_write_memory $end
    $var wire  1 =- reset $end
    $var wire 32 /. write_data_execute [31:0] $end
    $var wire 32 e) write_data_memory [31:0] $end
    $var wire  5 # write_register_execute [4:0] $end
    $var wire  5 =) write_register_memory [4:0] $end
   $upscope $end
   $scope module fetch_decode_register $end
    $var wire  1 Y' HALT_decode $end
    $var wire  1 Q' HALT_fetch $end
    $var wire  1 q# clear $end
    $var wire  1 o* clk $end
    $var wire  1 ;$ enable $end
    $var wire 32 O* instruction_decode [31:0] $end
    $var wire 32 O. instruction_fetch [31:0] $end
    $var wire 32 a' program_counter_plus_four_decode [31:0] $end
    $var wire 32 I' program_counter_plus_four_fetch [31:0] $end
    $var wire  1 =- reset $end
   $upscope $end
   $scope module hazard_unit $end
    $var wire  1 S, HI_register_write_memory $end
    $var wire  1 s, HI_register_write_writeback $end
    $var wire  1 [, LO_register_write_memory $end
    $var wire  1 {, LO_register_write_writeback $end
    $var wire  5 1+ Rs_decode [4:0] $end
    $var wire  5 [( Rs_execute [4:0] $end
    $var wire  5 9+ Rt_decode [4:0] $end
    $var wire  5 c( Rt_execute [4:0] $end
    $var wire  1 w" branch_decode $end
    $var wire  1 S$ branchstall $end
    $var wire  1 C$ flush_execute_register $end
    $var wire  1 _* forward_register_file_output_A_decode $end
    $var wire  3 -! forward_register_file_output_A_execute [2:0] $end
    $var wire  1 g* forward_register_file_output_B_decode $end
    $var wire  3 5! forward_register_file_output_B_execute [2:0] $end
    $var wire  1 K$ lwstall $end
    $var wire  1 #, memory_to_register_execute $end
    $var wire  1 C, memory_to_register_memory $end
    $var wire  1 +( program_counter_multiplexer_jump_execute $end
    $var wire  1 #( register_write_execute $end
    $var wire  1 5) register_write_memory $end
    $var wire  1 }) register_write_writeback $end
    $var wire  1 ;$ stall_decode $end
    $var wire  1 3$ stall_fetch $end
    $var wire  1 ;( using_HI_LO_execute $end
    $var wire  5 # write_register_execute [4:0] $end
    $var wire  5 =) write_register_memory [4:0] $end
    $var wire  5 7* write_register_writeback [4:0] $end
   $upscope $end
   $scope module memory_writeback_register $end
    $var wire 32 c, ALU_HI_output_memory [31:0] $end
    $var wire 32 %- ALU_HI_output_writeback [31:0] $end
    $var wire 32 k, ALU_LO_output_memory [31:0] $end
    $var wire 32 -- ALU_LO_output_writeback [31:0] $end
    $var wire 32 ]) ALU_output_memory [31:0] $end
    $var wire 32 ?* ALU_output_writeback [31:0] $end
    $var wire  1 U) HALT_memory $end
    $var wire  1 /* HALT_writeback $end
    $var wire  1 S, HI_register_write_memory $end
    $var wire  1 s, HI_register_write_writeback $end
    $var wire  1 [, LO_register_write_memory $end
    $var wire  1 {, LO_register_write_writeback $end
    $var wire  1 o* clk $end
    $var wire  1 C, memory_to_register_memory $end
    $var wire  1 '* memory_to_register_writeback $end
    $var wire 32 Y+ read_data_memory [31:0] $end
    $var wire 32 G* read_data_writeback [31:0] $end
    $var wire  1 5) register_write_memory $end
    $var wire  1 }) register_write_writeback $end
    $var wire  1 =- reset $end
    $var wire  5 =) write_register_memory [4:0] $end
    $var wire  5 7* write_register_writeback [4:0] $end
   $upscope $end
   $scope module pc $end
    $var wire 32 i# address_input [31:0] $end
    $var wire 32 A' address_output [31:0] $end
    $var wire  1 o* clk $end
    $var wire  1 3$ enable $end
    $var wire  1 Q' halt $end
    $var wire  1 =- reset $end
   $upscope $end
   $scope module plus_four_adder $end
    $var wire 32 A' a [31:0] $end
    $var wire 32 ?. b [31:0] $end
    $var wire 32 I' z [31:0] $end
   $upscope $end
   $scope module plus_four_adder_execute $end
    $var wire 32 ?. a [31:0] $end
    $var wire 32 %) b [31:0] $end
    $var wire 32 {( z [31:0] $end
   $upscope $end
   $scope module program_counter_multiplexer $end
    $var wire 32 G. BUS_WIDTH [31:0] $end
    $var wire  1 q# control $end
    $var wire 32 I' input_0 [31:0] $end
    $var wire 32 3 input_1 [31:0] $end
    $var wire 32 ; resolved [31:0] $end
   $upscope $end
   $scope module program_counter_multiplexer_two $end
    $var wire 32 G. BUS_WIDTH [31:0] $end
    $var wire  1 E) control $end
    $var wire 32 ; input_0 [31:0] $end
    $var wire 32 m) input_1 [31:0] $end
    $var wire 32 i# resolved [31:0] $end
   $upscope $end
   $scope module reg_output_comparator $end
    $var wire 32 #$ a [31:0] $end
    $var wire 32 +$ b [31:0] $end
    $var wire  1 y# c $end
    $var wire  6 )+ op [5:0] $end
    $var wire  5 9+ rt [4:0] $end
   $upscope $end
   $scope module register_file $end
    $var wire 32 y+ HI_reg [31:0] $end
    $var wire 32 %- HI_write_data [31:0] $end
    $var wire  1 s, HI_write_enable $end
    $var wire 32 q+ LO_reg [31:0] $end
    $var wire 32 -- LO_write_data [31:0] $end
    $var wire  1 {, LO_write_enable $end
    $var wire  1 o* clk $end
    $var wire  1 i+ modified_write_clk $end
    $var wire  1 7. pipelined $end
    $var wire  5 1+ read_address_1 [4:0] $end
    $var wire  5 9+ read_address_2 [4:0] $end
    $var wire 32 ?" read_data_1 [31:0] $end
    $var wire 32 G" read_data_2 [31:0] $end
    $var wire 32 y+ read_data_HI [31:0] $end
    $var wire 32 q+ read_data_LO [31:0] $end
    $var wire 32 M- read_register_2 [31:0] $end
    $var wire 32 [$ registers(0) [31:0] $end
    $var wire 32 \$ registers(1) [31:0] $end
    $var wire 32 e$ registers(10) [31:0] $end
    $var wire 32 f$ registers(11) [31:0] $end
    $var wire 32 g$ registers(12) [31:0] $end
    $var wire 32 h$ registers(13) [31:0] $end
    $var wire 32 i$ registers(14) [31:0] $end
    $var wire 32 j$ registers(15) [31:0] $end
    $var wire 32 k$ registers(16) [31:0] $end
    $var wire 32 l$ registers(17) [31:0] $end
    $var wire 32 m$ registers(18) [31:0] $end
    $var wire 32 n$ registers(19) [31:0] $end
    $var wire 32 ]$ registers(2) [31:0] $end
    $var wire 32 o$ registers(20) [31:0] $end
    $var wire 32 p$ registers(21) [31:0] $end
    $var wire 32 q$ registers(22) [31:0] $end
    $var wire 32 r$ registers(23) [31:0] $end
    $var wire 32 s$ registers(24) [31:0] $end
    $var wire 32 t$ registers(25) [31:0] $end
    $var wire 32 u$ registers(26) [31:0] $end
    $var wire 32 v$ registers(27) [31:0] $end
    $var wire 32 w$ registers(28) [31:0] $end
    $var wire 32 x$ registers(29) [31:0] $end
    $var wire 32 ^$ registers(3) [31:0] $end
    $var wire 32 y$ registers(30) [31:0] $end
    $var wire 32 z$ registers(31) [31:0] $end
    $var wire 32 _$ registers(4) [31:0] $end
    $var wire 32 `$ registers(5) [31:0] $end
    $var wire 32 a$ registers(6) [31:0] $end
    $var wire 32 b$ registers(7) [31:0] $end
    $var wire 32 c$ registers(8) [31:0] $end
    $var wire 32 d$ registers(9) [31:0] $end
    $var wire  5 7* write_address [4:0] $end
    $var wire 32 + write_data [31:0] $end
    $var wire  1 }) write_enable $end
   $upscope $end
   $scope module write_register_execute_mux $end
    $var wire 32 W. BUS_WIDTH [31:0] $end
    $var wire  2 i' control [1:0] $end
    $var wire  5 c( input_0 [4:0] $end
    $var wire  5 k( input_1 [4:0] $end
    $var wire  5 _. input_2 [4:0] $end
    $var wire  5 g. input_3 [4:0] $end
    $var wire  5 # resolved [4:0] $end
   $upscope $end
   $scope module writeback_mux $end
    $var wire 32 G. BUS_WIDTH [31:0] $end
    $var wire  1 '* control $end
    $var wire 32 ?* input_0 [31:0] $end
    $var wire 32 G* input_1 [31:0] $end
    $var wire 32 + resolved [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000 #
b00000000000000000000000000000000 +
b00000000000000000000000000000000 3
b00000000000000000000000000000100 ;
b00000000000000000000000000000000 C
b00000000000000000000000000000000 K
b00000000000000000000000000000000 S
b00000000000000000000000000000000 [
b00000000000000000000000000000000 c
b00000000000000000000000000000000 k
b00000000000000000000000000000000 s
b00000000000000000000000000000000 {
b00000000000000000000000000000000 %!
b000 -!
b000 5!
b00000000000000000000000000000000 =!
b00000 E!
b0000000000000000000000000000000000000000000000000000000000000000 M!
b0000000000000000000000000000000000000000000000000000000000000000 ]!
b0000000000000000000000000000000000000000000000000000000000000000 m!
b0000000000000000000000000000000000000000000000000000000000000000 }!
b0000000000000000000000000000000000000000000000000000000000000000 /"
b00000000000000000000000000000000 ?"
b00000000000000000000000000000000 G"
1O"
0W"
0_"
b00 g"
b01 o"
0w"
b000000 !#
0)#
01#
09#
0A#
0I#
b000000 Q#
b00000 Y#
b000000 a#
b00000000000000000000000000000100 i#
0q#
0y#
b00000000000000000000000000000000 #$
b00000000000000000000000000000000 +$
03$
0;$
0C$
0K$
0S$
b00000000000000000000000000000000 [$
b00000000000000000000000000000000 \$
b00000000000000000000000000000000 ]$
b00000000000000000000000000000000 ^$
b00000000000000000000000000000000 _$
b00000000000000000000000000000000 `$
b00000000000000000000000000000000 a$
b00000000000000000000000000000000 b$
b00000000000000000000000000000000 c$
b00000000000000000000000000000000 d$
b00000000000000000000000000000000 e$
b00000000000000000000000000000000 f$
b00000000000000000000000000000000 g$
b00000000000000000000000000000000 h$
b00000000000000000000000000000000 i$
b00000000000000000000000000000000 j$
b00000000000000000000000000000000 k$
b00000000000000000000000000000000 l$
b00000000000000000000000000000000 m$
b00000000000000000000000000000000 n$
b00000000000000000000000000000000 o$
b00000000000000000000000000000000 p$
b00000000000000000000000000000000 q$
b00000000000000000000000000000000 r$
b00000000000000000000000000000000 s$
b00000000000000000000000000000000 t$
b00000000000000000000000000000000 u$
b00000000000000000000000000000000 v$
b00000000000000000000000000000000 w$
b00000000000000000000000000000000 x$
b00000000000000000000000000000000 y$
b00000000000000000000000000000000 z$
b00000000000000000000000000000000 A'
b00000000000000000000000000000100 I'
0Q'
0Y'
b00000000000000000000000000000000 a'
b00 i'
b00 q'
b000000 y'
0#(
0+(
03(
0;(
0C(
b00000000000000000000000000000000 K(
b00000000000000000000000000000000 S(
b00000 [(
b00000 c(
b00000 k(
b00000000000000000000000000000000 s(
b00000000000000000000000000000100 {(
b00000000000000000000000000000000 %)
b00000000000000000000000000000000 -)
05)
b00000 =)
0E)
0M)
0U)
b00000000000000000000000000000000 ])
b00000000000000000000000000000000 e)
b00000000000000000000000000000000 m)
b00000000000000000000000000000000 u)
0})
0'*
0/*
b00000 7*
b00000000000000000000000000000000 ?*
b00000000000000000000000000000000 G*
b00000000000000000000000000000000 O*
b00000000000000000000000000000000 W*
0_*
0g*
0o*
0w*
b00000000000000000000000000000000 !+
b000000 )+
b00000 1+
b00000 9+
b00000 A+
b0000000000000000 I+
b00000000000000000000000000 Q+
b00000000000000000000000000000000 Y+
0a+
1i+
b00000000000000000000000000000000 q+
b00000000000000000000000000000000 y+
0#,
0+,
03,
0;,
0C,
0K,
0S,
0[,
b00000000000000000000000000000000 c,
b00000000000000000000000000000000 k,
0s,
0{,
b00000000000000000000000000000000 %-
b00000000000000000000000000000000 --
05-
1=-
1E-
b00000000000000000000000000000000 M-
b00000000000000000000000000000000 U-
0]-
0e-
0m-
b00000000000000000000000000000000 u-
b0000 }-
b00000000000000000000000000000000 '.
b00000000000000000000000000000000 /.
17.
b00000000000000000000000000000100 ?.
b00000000000000000000000000100000 G.
b00000000000000000000000000000000 O.
b00000000000000000000000000000101 W.
b11111 _.
b00000 g.
#2
b10111111110000000000000000000100 ;
b10111111110000000000000000000100 i#
b10111111110000000000000000000000 A'
b10111111110000000000000000000100 I'
1o*
0i+
15-
b10111111110000000000000000000000 U-
1e-
#3
0o*
1i+
05-
#3
0=-
#4
b10111111110000000000000000000100 3
b10111111110000000000000000001000 ;
b10111111110000000000000000001000 i#
b10111111110000000000000000000100 A'
b10111111110000000000000000001000 I'
b10111111110000000000000000000100 a'
b01 i'
1#(
b10110000000000000000000000000000 W*
1o*
1w*
0i+
15-
b10111111110000000000000000000100 U-
b00100100000000100000000000000001 '.
#5
b10111111110000000000000000001000 3
b00000000000000000000000000000100 C
b00000000000000000000000000000001 K
b01 g"
b00 o"
b100001 !#
b001001 Q#
b00010 Y#
b000001 a#
b10110000000010000000000000000100 W*
0o*
0w*
b00100100000000100000000000000001 !+
b001001 )+
b00010 9+
b0000000000000001 I+
b00000000100000000000000001 Q+
1i+
05-
#5
#6
b00010 #
b10111111110000000000000000001100 3
b10111111110000000000000000001100 ;
b00000000000000000000000000000001 k
b00000000000000000000000000000001 s
b0000000000000000000000000000000000000000000000000000000000000001 ]!
b0000000000000000000000000000000000000000000000000000000000000001 }!
b10111111110000000000000000001100 i#
b10111111110000000000000000001000 A'
b10111111110000000000000000001100 I'
b10111111110000000000000000001000 a'
b00 i'
b01 q'
b100001 y'
b00010 c(
b00000000000000000000000000000001 s(
b10111111110000000000000000001000 {(
b10111111110000000000000000000100 %)
b10110000000010000000000000000100 -)
15)
1o*
1w*
0i+
15-
b10111111110000000000000000001000 U-
b10101100000000100000000000000011 '.
#7
b10111111110000000000000000010100 3
b00000000000000000000000000001100 C
b00000000000000000000000000000011 K
0O"
1W"
1_"
b101011 Q#
b000011 a#
b10110000000010000000000000001100 W*
0o*
0w*
b10101100000000100000000000000011 !+
b101011 )+
b0000000000000011 I+
b00000000100000000000000011 Q+
1i+
05-
#7
#8
b10111111110000000000000000011000 3
b10111111110000000000000000010000 ;
b00000000000000000000000000000011 k
b00000000000000000000000000000011 s
b010 5!
b00000000000000000000000000000001 =!
b0000000000000000000000000000000000000000000000000000000000000011 ]!
b0000000000000000000000000000000000000000000000000000000000000011 }!
b10111111110000000000000000010000 i#
b00000000000000000000000000000001 +$
13$
1;$
1C$
1K$
b10111111110000000000000000001100 A'
b10111111110000000000000000010000 I'
b10111111110000000000000000001100 a'
0#(
b00000000000000000000000000000011 s(
b10111111110000000000000000001100 {(
b10111111110000000000000000001000 %)
b10110000000010000000000000001100 -)
b00010 =)
b00000000000000000000000000000001 ])
b00000000000000000000000000000001 m)
b10110000000010000000000000000100 u)
1})
1g*
1o*
1w*
0i+
1#,
1+,
15-
b10111111110000000000000000001100 U-
b10001100000000100001000000000000 '.
#9
b10111111110000000100000000001100 3
b00000000000000000100000000000000 C
b00000000000000000001000000000000 K
1O"
0_"
b100011 Q#
b000000 a#
b10110000000010000100000000000000 W*
0o*
0w*
b10001100000000100001000000000000 !+
b100011 )+
b00010 A+
b0001000000000000 I+
b00000000100001000000000000 Q+
1i+
05-
#9
#10
b00000 #
b00000000000000000000000000000001 +
b00000000000000000000000000000000 k
b00000000000000000000000000000000 s
b000 5!
b00000000000000000000000000000000 =!
b0000000000000000000000000000000000000000000000000000000000000000 ]!
b0000000000000000000000000000000000000000000000000000000000000000 }!
b00000000000000000000000000000000 +$
03$
0;$
0C$
0K$
b00 q'
b000000 y'
b00000 c(
b00000000000000000000000000000000 s(
b00000000000000000000000000000100 {(
b00000000000000000000000000000000 %)
b00000000000000000000000000000000 -)
05)
b00000000000000000000000000000011 ])
b00000000000000000000000000000011 m)
b10110000000010000000000000001100 u)
b00010 7*
b00000000000000000000000000000001 ?*
0g*
1o*
1w*
0i+
0#,
0+,
1C,
1K,
15-
#11
1a+
05-
b00000000000000000000000000000011 U-
#11
#12
15-
b00000000000000000000000000000000 '.
#13
b00000000000000000000000000000001 [
b00000000000000000000000000000001 G"
b00000000000000000000000000000001 +$
b00000000000000000000000000000001 ]$
0o*
0w*
0a+
1i+
05-
b00000000000000000000000000000001 M-
b10111111110000000000000000001100 U-
#13
#14
b00010 #
b00000000000000000000000000000000 +
b10111111110000000100000000010000 3
b10111111110000000000000000010100 ;
b00000000000000000001000000000000 k
b00000000000000000001000000000000 s
b00000000000000000000000000000001 =!
b0000000000000000000000000000000000000000000000000001000000000000 ]!
b0000000000000000000000000000000000000000000000000001000000000000 }!
b10111111110000000000000000010100 i#
13$
1;$
1C$
1K$
b10111111110000000000000000010000 A'
b10111111110000000000000000010100 I'
b10111111110000000000000000010000 a'
b01 q'
b100001 y'
1#(
b00000000000000000000000000000001 S(
b00010 c(
b00010 k(
b00000000000000000001000000000000 s(
b10111111110000000000000000010000 {(
b10111111110000000000000000001100 %)
b10110000000010000100000000000000 -)
b00000 =)
b00000000000000000000000000000000 ])
b00000000000000000000000000000000 m)
b00000000000000000000000000000000 u)
0})
1'*
b00000000000000000000000000000011 ?*
1o*
1w*
0i+
1#,
0C,
0K,
15-
b10111111110000000000000000010000 U-
b00000000000000000000000000001000 '.
#15
b10111111110000000000000000110000 3
b00000000000000000000000000100000 C
b00000000000000000000000000001000 K
b00000000000000000000000000000000 [
b00000000000000000000000000000000 G"
0W"
b00 g"
b01 o"
b001000 !#
1)#
b000000 Q#
b00000 Y#
b001000 a#
b00000000000000000000000000000000 +$
03$
0;$
0C$
0K$
b10110000000000000000000000100000 W*
0o*
0w*
b00000000000000000000000000001000 !+
b000000 )+
b00000 9+
b00000 A+
b0000000000001000 I+
b00000000000000000000001000 Q+
1i+
05-
#15
#16
b00000 #
b10111111110000000000000000110100 3
b10111111110000000000000000011000 ;
b00000000000000000000000000000000 k
b00000000000000000000000000000000 s
b00000000000000000000000000000000 =!
b0000000000000000000000000000000000000000000000000000000000000000 ]!
b0000000000000000000000000000000000000000000000000000000000000000 }!
b10111111110000000000000000011000 i#
13$
1;$
b10111111110000000000000000010100 A'
b10111111110000000000000000011000 I'
b10111111110000000000000000010100 a'
b01 i'
b00 q'
b001000 y'
1+(
b00000000000000000000000000000000 S(
b00000 c(
b00000 k(
b00000000000000000000000000001000 s(
b10111111110000000000000000010100 {(
b10111111110000000000000000010000 %)
b10110000000000000000000000100000 -)
15)
b00010 =)
b00000000000000000001000000000000 ])
b00000000000000000001000000000000 m)
b10110000000010000100000000000000 u)
0'*
b00000 7*
b00000000000000000000000000000000 ?*
1o*
1w*
0i+
0#,
1C,
15-
b10111111110000000000000000010100 U-
b00000000000000000000000000000000 '.
#17
b10111111110000000000000000010100 3
b00000000000000000000000000000000 C
b00000000000000000000000000000000 K
b000000 !#
0)#
b000000 a#
b10110000000000000000000000000000 W*
b00000000000000000000000000000000 !+
b0000000000000000 I+
b00000000000000000000000000 Q+
1a+
05-
b00000000000000000001000000000000 U-
#17
#18
15-
b00000000000100000000000000000000 '.
#19
0o*
0w*
b00000000000100000000000000000000 Y+
0a+
1i+
05-
b10111111110000000000000000010100 U-
#19
#20
b00000000000100000000000000000000 +
b00000000000000000000000000000000 i#
03$
0;$
b000000 y'
0+(
b00000000000000000000000000000000 s(
b10111111110000000000000000011000 {(
b10111111110000000000000000010100 %)
b10110000000000000000000000000000 -)
b00000 =)
1E)
b00000000000000000000000000000000 ])
b00000000000000000000000000000000 m)
b10110000000000000000000000100000 u)
1})
1'*
b00010 7*
b00000000000000000001000000000000 ?*
b00000000000100000000000000000000 G*
1o*
1w*
0i+
0C,
15-
b00000000000000000000000000000000 '.
#21
b00000000000100000000000000000000 ]$
0o*
0w*
1i+
05-
b00000000000100000000000000000000 M-
#21
#22
b00000000000000000000000000000000 +
b10111111110000000000000000011000 3
b00000000000000000000000000000100 ;
b00000000000000000000000000000100 i#
b00000000000000000000000000000000 A'
b00000000000000000000000000000100 I'
1Q'
b10111111110000000000000000011000 a'
0E)
b10110000000000000000000000000000 u)
0'*
b00000 7*
b00000000000000000000000000000000 ?*
1o*
1w*
0i+
15-
b00000000000000000000000000000000 U-
#23
0o*
0w*
1i+
05-
#23
#24
b00000000000000000000000000000100 3
1Y'
b00000000000000000000000000000100 a'
b10111111110000000000000000011100 {(
b10111111110000000000000000011000 %)
b00000000000000000000000000000000 W*
1o*
1w*
0i+
15-
#25
0o*
0w*
1i+
05-
#25
#26
1C(
b00000000000000000000000000001000 {(
b00000000000000000000000000000100 %)
b00000000000000000000000000000000 -)
1o*
1w*
0i+
15-
#27
0o*
0w*
1i+
05-
#27
#28
1U)
b00000000000000000000000000000000 u)
1o*
1w*
0i+
15-
#29
0o*
0w*
1i+
05-
#29
#30
1/*
1o*
1w*
0i+
15-
0E-
#31
0o*
0w*
1i+
05-
