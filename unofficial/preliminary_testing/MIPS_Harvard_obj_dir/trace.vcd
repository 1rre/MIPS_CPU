$version Generated by VerilatedVcd $end
$date Fri Dec 11 18:39:27 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 c, active $end
  $var wire  1 S, clk $end
  $var wire  1 s, clk_enable $end
  $var wire 32 -- data_address [31:0] $end
  $var wire  1 =- data_read $end
  $var wire 32 M- data_readdata [31:0] $end
  $var wire  1 5- data_write $end
  $var wire 32 E- data_writedata [31:0] $end
  $var wire 32 {, instr_address [31:0] $end
  $var wire 32 %- instr_readdata [31:0] $end
  $var wire 32 k, register_v0 [31:0] $end
  $var wire  1 [, reset $end
  $scope module mips_cpu_harvard $end
   $var wire 32 /" ALU_HI_output_execute [31:0] $end
   $var wire 32 q+ ALU_HI_output_memory [31:0] $end
   $var wire 32 C, ALU_HI_output_writeback [31:0] $end
   $var wire 32 7" ALU_LO_output_execute [31:0] $end
   $var wire 32 y+ ALU_LO_output_memory [31:0] $end
   $var wire 32 K, ALU_LO_output_writeback [31:0] $end
   $var wire  6 =! ALU_function_decode [5:0] $end
   $var wire  6 /& ALU_function_execute [5:0] $end
   $var wire 32 '" ALU_output_execute [31:0] $end
   $var wire 32 Y' ALU_output_memory [31:0] $end
   $var wire 32 i' ALU_output_memory_resolved [31:0] $end
   $var wire 32 #( ALU_output_writeback [31:0] $end
   $var wire  2 %! ALU_src_B_decode [1:0] $end
   $var wire  2 '& ALU_src_B_execute [1:0] $end
   $var wire  1 ]! HI_register_write_decode $end
   $var wire  1 9+ HI_register_write_execute $end
   $var wire  1 a+ HI_register_write_memory $end
   $var wire  1 +, HI_register_write_writeback $end
   $var wire  1 e! LO_register_write_decode $end
   $var wire  1 A+ LO_register_write_execute $end
   $var wire  1 i+ LO_register_write_memory $end
   $var wire  1 3, LO_register_write_writeback $end
   $var wire  5 M% Rd_decode [4:0] $end
   $var wire  5 o& Rd_execute [4:0] $end
   $var wire  5 =% Rs_decode [4:0] $end
   $var wire  5 _& Rs_execute [4:0] $end
   $var wire  5 E% Rt_decode [4:0] $end
   $var wire  5 g& Rt_execute [4:0] $end
   $var wire  1 c, active $end
   $var wire  1 5! branch_decode $end
   $var wire  1 S, clk $end
   $var wire  1 s, clk_enable $end
   $var wire 32 [$ comparator_1 [31:0] $end
   $var wire 32 c$ comparator_2 [31:0] $end
   $var wire 32 -- data_address [31:0] $end
   $var wire  1 =- data_read $end
   $var wire 32 M- data_readdata [31:0] $end
   $var wire  1 5- data_write $end
   $var wire 32 E- data_writedata [31:0] $end
   $var wire  1 C$ equal_decode $end
   $var wire  1 U- flush_decode_execute_register $end
   $var wire  1 W" flush_execute_register $end
   $var wire  1 u- flush_fetch_decode_register $end
   $var wire  1 3( forward_A_decode $end
   $var wire  3 _" forward_A_execute [2:0] $end
   $var wire  1 ;( forward_B_decode $end
   $var wire  3 g" forward_B_execute [2:0] $end
   $var wire  1 {$ halt $end
   $var wire 16 U% immediate [15:0] $end
   $var wire 32 {, instr_address [31:0] $end
   $var wire 32 %- instr_readdata [31:0] $end
   $var wire 32 %% instruction_decode [31:0] $end
   $var wire 32 %- instruction_fetch [31:0] $end
   $var wire  1 # internal_clk $end
   $var wire  1 U! j_instruction_decode $end
   $var wire  1 ?& j_instruction_execute $end
   $var wire  1 Q' j_instruction_memory $end
   $var wire 26 ]% j_offset [25:0] $end
   $var wire 32 e% j_program_counter_decode [31:0] $end
   $var wire 32 1' j_program_counter_execute [31:0] $end
   $var wire 32 q' j_program_counter_memory [31:0] $end
   $var wire  1 s memory_to_register_decode $end
   $var wire  1 u% memory_to_register_execute $end
   $var wire  1 9' memory_to_register_memory $end
   $var wire  1 y' memory_to_register_writeback $end
   $var wire  1 { memory_write_decode $end
   $var wire  1 }% memory_write_execute $end
   $var wire  1 A' memory_write_memory $end
   $var wire  6 5% op [5:0] $end
   $var wire 32 3 program_counter_branch_decode [31:0] $end
   $var wire 32 k$ program_counter_fetch [31:0] $end
   $var wire  1 E! program_counter_multiplexer_jump_decode $end
   $var wire  1 7& program_counter_multiplexer_jump_execute $end
   $var wire  1 I' program_counter_multiplexer_jump_memory $end
   $var wire 32 S program_counter_mux_1_out [31:0] $end
   $var wire 32 !' program_counter_plus_eight_execute [31:0] $end
   $var wire 32 -% program_counter_plus_four_decode [31:0] $end
   $var wire 32 )' program_counter_plus_four_execute [31:0] $end
   $var wire 32 s$ program_counter_plus_four_fetch [31:0] $end
   $var wire 32 K program_counter_prime [31:0] $end
   $var wire  1 ;$ program_counter_src_decode $end
   $var wire  5 =% read_address_1 [4:0] $end
   $var wire  5 E% read_address_2 [4:0] $end
   $var wire 32 M- read_data_memory [31:0] $end
   $var wire 32 +( read_data_writeback [31:0] $end
   $var wire  2 -! register_destination_decode [1:0] $end
   $var wire  2 m% register_destination_execute [1:0] $end
   $var wire  1 ]- register_file_memory_mux_control_execute $end
   $var wire  1 m- register_file_memory_mux_memory $end
   $var wire 32 K$ register_file_output_A_decode [31:0] $end
   $var wire 32 S$ register_file_output_B_decode [31:0] $end
   $var wire 32 K( register_file_output_HI_decode [31:0] $end
   $var wire 32 C( register_file_output_LO_decode [31:0] $end
   $var wire 32 k, register_v0 [31:0] $end
   $var wire  1 k register_write_decode $end
   $var wire  1 I+ register_write_execute $end
   $var wire  1 Q+ register_write_memory $end
   $var wire  1 #, register_write_writeback $end
   $var wire  1 [, reset $end
   $var wire 32 ?" result_writeback [31:0] $end
   $var wire 32 ; shifter_output_decode [31:0] $end
   $var wire 32 C sign_imm_decode [31:0] $end
   $var wire 32 w& sign_imm_execute [31:0] $end
   $var wire 32 u! src_A_ALU_execute [31:0] $end
   $var wire 32 [ src_A_decode [31:0] $end
   $var wire 32 O& src_A_execute [31:0] $end
   $var wire 32 }! src_B_ALU_execute [31:0] $end
   $var wire 32 c src_B_decode [31:0] $end
   $var wire 32 W& src_B_execute [31:0] $end
   $var wire  1 O" stall_decode $end
   $var wire  1 G" stall_fetch $end
   $var wire  1 M! using_HI_LO_decode $end
   $var wire  1 G& using_HI_LO_execute $end
   $var wire 32 e- write_data_execute [31:0] $end
   $var wire 32 a' write_data_memory [31:0] $end
   $var wire  5 m! write_register_execute [4:0] $end
   $var wire  5 Y+ write_register_memory [4:0] $end
   $var wire  5 ;, write_register_writeback [4:0] $end
   $scope module adder_decode $end
    $var wire 32 ; a [31:0] $end
    $var wire 32 -% b [31:0] $end
    $var wire 32 3 z [31:0] $end
   $upscope $end
   $scope module alu $end
    $var wire 64 y# ALU_HI_LO_output [63:0] $end
    $var wire 32 /" ALU_HI_output [31:0] $end
    $var wire 32 7" ALU_LO_output [31:0] $end
    $var wire  6 /& ALU_operation [5:0] $end
    $var wire 32 '" ALU_output [31:0] $end
    $var wire 64 Y# extended_input_1 [63:0] $end
    $var wire 64 i# extended_input_2 [63:0] $end
    $var wire 32 u! input_1 [31:0] $end
    $var wire 32 }! input_2 [31:0] $end
    $var wire  5 1# shift_amount [4:0] $end
    $var wire 64 9# sign_extened_input_1 [63:0] $end
    $var wire 64 I# sign_extened_input_2 [63:0] $end
   $upscope $end
   $scope module alu_input_mux $end
    $var wire 32 q+ ALU_HI_output_memory [31:0] $end
    $var wire 32 y+ ALU_LO_output_memory [31:0] $end
    $var wire 32 Y' ALU_output_memory [31:0] $end
    $var wire  2 '& ALU_src_B_execute [1:0] $end
    $var wire 32 C, HI_result_writeback [31:0] $end
    $var wire 32 K, LO_result_writeback [31:0] $end
    $var wire  3 _" forward_one_execute [2:0] $end
    $var wire  3 g" forward_two_execute [2:0] $end
    $var wire 32 !' program_counter_plus_eight_execute [31:0] $end
    $var wire 32 O& read_data_1_reg [31:0] $end
    $var wire 32 W& read_data_2_reg [31:0] $end
    $var wire 32 ?" result_writeback [31:0] $end
    $var wire 32 w& sign_imm_execute [31:0] $end
    $var wire 32 u! src_A_ALU_execute [31:0] $end
    $var wire 32 }! src_B_ALU_execute [31:0] $end
    $var wire 32 )# src_mux_input_0 [31:0] $end
   $upscope $end
   $scope module control_unit $end
    $var wire  6 =! ALU_function [5:0] $end
    $var wire  2 %! ALU_src_B [1:0] $end
    $var wire  1 ]! HI_register_write $end
    $var wire  1 e! LO_register_write $end
    $var wire  1 5! branch $end
    $var wire  6 !# funct [5:0] $end
    $var wire 32 %% instruction [31:0] $end
    $var wire  1 U! j_instruction $end
    $var wire  1 s memory_to_register $end
    $var wire  1 { memory_write $end
    $var wire  6 o" op [5:0] $end
    $var wire  1 E! program_counter_multiplexer_jump $end
    $var wire  2 -! register_destination [1:0] $end
    $var wire  1 k register_write $end
    $var wire  5 w" rt [4:0] $end
    $var wire  1 M! using_HI_LO $end
   $upscope $end
   $scope module decode_execute_register $end
    $var wire  6 =! ALU_function_decode [5:0] $end
    $var wire  6 /& ALU_function_execute [5:0] $end
    $var wire  2 %! ALU_src_B_decode [1:0] $end
    $var wire  2 '& ALU_src_B_execute [1:0] $end
    $var wire  1 ]! HI_register_write_decode $end
    $var wire  1 9+ HI_register_write_execute $end
    $var wire  1 e! LO_register_write_decode $end
    $var wire  1 A+ LO_register_write_execute $end
    $var wire  5 M% Rd_decode [4:0] $end
    $var wire  5 o& Rd_execute [4:0] $end
    $var wire  5 =% Rs_decode [4:0] $end
    $var wire  5 _& Rs_execute [4:0] $end
    $var wire  5 E% Rt_decode [4:0] $end
    $var wire  5 g& Rt_execute [4:0] $end
    $var wire  1 W" clear $end
    $var wire  1 # clk $end
    $var wire  1 U! j_instruction_decode $end
    $var wire  1 ?& j_instruction_execute $end
    $var wire 32 e% j_program_counter_decode [31:0] $end
    $var wire 32 1' j_program_counter_execute [31:0] $end
    $var wire  1 s memory_to_register_decode $end
    $var wire  1 u% memory_to_register_execute $end
    $var wire  1 { memory_write_decode $end
    $var wire  1 }% memory_write_execute $end
    $var wire  1 E! program_counter_multiplexer_jump_decode $end
    $var wire  1 7& program_counter_multiplexer_jump_execute $end
    $var wire 32 -% program_counter_plus_four_decode [31:0] $end
    $var wire 32 )' program_counter_plus_four_execute [31:0] $end
    $var wire  2 -! register_destination_decode [1:0] $end
    $var wire  2 m% register_destination_execute [1:0] $end
    $var wire  1 k register_write_decode $end
    $var wire  1 I+ register_write_execute $end
    $var wire  1 [, reset $end
    $var wire 32 C sign_imm_decode [31:0] $end
    $var wire 32 w& sign_imm_execute [31:0] $end
    $var wire 32 K$ src_A_decode [31:0] $end
    $var wire 32 O& src_A_execute [31:0] $end
    $var wire 32 S$ src_B_decode [31:0] $end
    $var wire 32 W& src_B_execute [31:0] $end
    $var wire  1 M! using_HI_LO_decode $end
    $var wire  1 G& using_HI_LO_execute $end
   $upscope $end
   $scope module execute_memory_register $end
    $var wire 32 /" ALU_HI_output_execute [31:0] $end
    $var wire 32 q+ ALU_HI_output_memory [31:0] $end
    $var wire 32 7" ALU_LO_output_execute [31:0] $end
    $var wire 32 y+ ALU_LO_output_memory [31:0] $end
    $var wire 32 '" ALU_output_execute [31:0] $end
    $var wire 32 Y' ALU_output_memory [31:0] $end
    $var wire  1 9+ HI_register_write_execute $end
    $var wire  1 a+ HI_register_write_memory $end
    $var wire  1 A+ LO_register_write_execute $end
    $var wire  1 i+ LO_register_write_memory $end
    $var wire  1 # clk $end
    $var wire  1 ?& j_instruction_execute $end
    $var wire  1 Q' j_instruction_memory $end
    $var wire 32 1' j_program_counter_execute [31:0] $end
    $var wire 32 q' j_program_counter_memory [31:0] $end
    $var wire  1 u% memory_to_register_execute $end
    $var wire  1 9' memory_to_register_memory $end
    $var wire  1 }% memory_write_execute $end
    $var wire  1 A' memory_write_memory $end
    $var wire  1 7& program_counter_multiplexer_jump_execute $end
    $var wire  1 I' program_counter_multiplexer_jump_memory $end
    $var wire  1 I+ register_write_execute $end
    $var wire  1 Q+ register_write_memory $end
    $var wire  1 [, reset $end
    $var wire 32 e- write_data_execute [31:0] $end
    $var wire 32 a' write_data_memory [31:0] $end
    $var wire  5 m! write_register_execute [4:0] $end
    $var wire  5 Y+ write_register_memory [4:0] $end
   $upscope $end
   $scope module fetch_decode_register $end
    $var wire  1 ;$ clear $end
    $var wire  1 # clk $end
    $var wire  1 O" enable $end
    $var wire 32 %% instruction_decode [31:0] $end
    $var wire 32 %- instruction_fetch [31:0] $end
    $var wire 32 -% program_counter_plus_four_decode [31:0] $end
    $var wire 32 s$ program_counter_plus_four_fetch [31:0] $end
    $var wire  1 [, reset $end
   $upscope $end
   $scope module hazard_unit $end
    $var wire  1 a+ HI_register_write_memory $end
    $var wire  1 +, HI_register_write_writeback $end
    $var wire  1 i+ LO_register_write_memory $end
    $var wire  1 3, LO_register_write_writeback $end
    $var wire  5 =% Rs_decode [4:0] $end
    $var wire  5 _& Rs_execute [4:0] $end
    $var wire  5 E% Rt_decode [4:0] $end
    $var wire  5 g& Rt_execute [4:0] $end
    $var wire  1 5! branch_decode $end
    $var wire  1 3$ branchstall $end
    $var wire  1 W" flush_execute_register $end
    $var wire  1 3( forward_register_file_output_A_decode $end
    $var wire  3 _" forward_register_file_output_A_execute [2:0] $end
    $var wire  1 ;( forward_register_file_output_B_decode $end
    $var wire  3 g" forward_register_file_output_B_execute [2:0] $end
    $var wire  1 +$ lwstall $end
    $var wire  1 u% memory_to_register_execute $end
    $var wire  1 9' memory_to_register_memory $end
    $var wire  1 7& program_counter_multiplexer_jump_execute $end
    $var wire  1 I+ register_write_execute $end
    $var wire  1 Q+ register_write_memory $end
    $var wire  1 #, register_write_writeback $end
    $var wire  1 O" stall_decode $end
    $var wire  1 G" stall_fetch $end
    $var wire  1 G& using_HI_LO_execute $end
    $var wire  5 m! write_register_execute [4:0] $end
    $var wire  5 Y+ write_register_memory [4:0] $end
    $var wire  5 ;, write_register_writeback [4:0] $end
   $upscope $end
   $scope module memory_writeback_register $end
    $var wire 32 q+ ALU_HI_output_memory [31:0] $end
    $var wire 32 C, ALU_HI_output_writeback [31:0] $end
    $var wire 32 y+ ALU_LO_output_memory [31:0] $end
    $var wire 32 K, ALU_LO_output_writeback [31:0] $end
    $var wire 32 Y' ALU_output_memory [31:0] $end
    $var wire 32 #( ALU_output_writeback [31:0] $end
    $var wire  1 a+ HI_register_write_memory $end
    $var wire  1 +, HI_register_write_writeback $end
    $var wire  1 i+ LO_register_write_memory $end
    $var wire  1 3, LO_register_write_writeback $end
    $var wire  1 # clk $end
    $var wire  1 9' memory_to_register_memory $end
    $var wire  1 y' memory_to_register_writeback $end
    $var wire 32 M- read_data_memory [31:0] $end
    $var wire 32 +( read_data_writeback [31:0] $end
    $var wire  1 Q+ register_write_memory $end
    $var wire  1 #, register_write_writeback $end
    $var wire  1 [, reset $end
    $var wire  5 Y+ write_register_memory [4:0] $end
    $var wire  5 ;, write_register_writeback [4:0] $end
   $upscope $end
   $scope module pc $end
    $var wire 32 K address_input [31:0] $end
    $var wire 32 k$ address_output [31:0] $end
    $var wire  1 # clk $end
    $var wire  1 G" enable $end
    $var wire  1 {$ halt $end
    $var wire  1 [, reset $end
   $upscope $end
   $scope module plus_four_adder $end
    $var wire 32 k$ a [31:0] $end
    $var wire 32 '. b [31:0] $end
    $var wire 32 s$ z [31:0] $end
   $upscope $end
   $scope module plus_four_adder_execute $end
    $var wire 32 '. a [31:0] $end
    $var wire 32 )' b [31:0] $end
    $var wire 32 !' z [31:0] $end
   $upscope $end
   $scope module program_counter_multiplexer $end
    $var wire 32 /. BUS_WIDTH [31:0] $end
    $var wire  1 ;$ control $end
    $var wire 32 s$ input_0 [31:0] $end
    $var wire 32 3 input_1 [31:0] $end
    $var wire 32 S resolved [31:0] $end
   $upscope $end
   $scope module program_counter_multiplexer_two $end
    $var wire 32 /. BUS_WIDTH [31:0] $end
    $var wire  1 I' control $end
    $var wire 32 S input_0 [31:0] $end
    $var wire 32 i' input_1 [31:0] $end
    $var wire 32 K resolved [31:0] $end
   $upscope $end
   $scope module reg_output_comparator $end
    $var wire 32 [$ a [31:0] $end
    $var wire 32 c$ b [31:0] $end
    $var wire  1 C$ c $end
    $var wire  6 5% op [5:0] $end
    $var wire  5 E% rt [4:0] $end
   $upscope $end
   $scope module register_file $end
    $var wire 32 K( HI_reg [31:0] $end
    $var wire 32 C, HI_write_data [31:0] $end
    $var wire  1 +, HI_write_enable $end
    $var wire 32 C( LO_reg [31:0] $end
    $var wire 32 K, LO_write_data [31:0] $end
    $var wire  1 3, LO_write_enable $end
    $var wire  1 # clk $end
    $var wire  1 + modified_write_clk $end
    $var wire  1 }- pipelined $end
    $var wire  5 =% read_address_1 [4:0] $end
    $var wire  5 E% read_address_2 [4:0] $end
    $var wire 32 K$ read_data_1 [31:0] $end
    $var wire 32 S$ read_data_2 [31:0] $end
    $var wire 32 K( read_data_HI [31:0] $end
    $var wire 32 C( read_data_LO [31:0] $end
    $var wire 32 k, read_register_2 [31:0] $end
    $var wire 32 S( registers(0) [31:0] $end
    $var wire 32 T( registers(1) [31:0] $end
    $var wire 32 ]( registers(10) [31:0] $end
    $var wire 32 ^( registers(11) [31:0] $end
    $var wire 32 _( registers(12) [31:0] $end
    $var wire 32 `( registers(13) [31:0] $end
    $var wire 32 a( registers(14) [31:0] $end
    $var wire 32 b( registers(15) [31:0] $end
    $var wire 32 c( registers(16) [31:0] $end
    $var wire 32 d( registers(17) [31:0] $end
    $var wire 32 e( registers(18) [31:0] $end
    $var wire 32 f( registers(19) [31:0] $end
    $var wire 32 U( registers(2) [31:0] $end
    $var wire 32 g( registers(20) [31:0] $end
    $var wire 32 h( registers(21) [31:0] $end
    $var wire 32 i( registers(22) [31:0] $end
    $var wire 32 j( registers(23) [31:0] $end
    $var wire 32 k( registers(24) [31:0] $end
    $var wire 32 l( registers(25) [31:0] $end
    $var wire 32 m( registers(26) [31:0] $end
    $var wire 32 n( registers(27) [31:0] $end
    $var wire 32 o( registers(28) [31:0] $end
    $var wire 32 p( registers(29) [31:0] $end
    $var wire 32 V( registers(3) [31:0] $end
    $var wire 32 q( registers(30) [31:0] $end
    $var wire 32 r( registers(31) [31:0] $end
    $var wire 32 W( registers(4) [31:0] $end
    $var wire 32 X( registers(5) [31:0] $end
    $var wire 32 Y( registers(6) [31:0] $end
    $var wire 32 Z( registers(7) [31:0] $end
    $var wire 32 [( registers(8) [31:0] $end
    $var wire 32 \( registers(9) [31:0] $end
    $var wire  5 ;, write_address [4:0] $end
    $var wire 32 ?" write_data [31:0] $end
    $var wire  1 #, write_enable $end
   $upscope $end
   $scope module register_file_memory_mux $end
    $var wire 32 /. BUS_WIDTH [31:0] $end
    $var wire  1 ]- control $end
    $var wire 32 Y' input_0 [31:0] $end
    $var wire 32 1' input_1 [31:0] $end
    $var wire 32 i' resolved [31:0] $end
   $upscope $end
   $scope module write_register_execute_mux $end
    $var wire 32 7. BUS_WIDTH [31:0] $end
    $var wire  2 m% control [1:0] $end
    $var wire  5 g& input_0 [4:0] $end
    $var wire  5 o& input_1 [4:0] $end
    $var wire  5 ?. input_2 [4:0] $end
    $var wire  5 G. input_3 [4:0] $end
    $var wire  5 m! resolved [4:0] $end
   $upscope $end
   $scope module writeback_mux $end
    $var wire 32 /. BUS_WIDTH [31:0] $end
    $var wire  1 y' control $end
    $var wire 32 #( input_0 [31:0] $end
    $var wire 32 +( input_1 [31:0] $end
    $var wire 32 ?" resolved [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
1+
b00000000000000000000000000000000 3
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 C
b00000000000000000000000000000100 K
b00000000000000000000000000000100 S
b00000000000000000000000000000000 [
b00000000000000000000000000000000 c
1k
0s
0{
b00 %!
b01 -!
05!
b000000 =!
0E!
0M!
0U!
0]!
0e!
b00000 m!
b00000000000000000000000000000000 u!
b00000000000000000000000000000000 }!
b00000000000000000000000000000000 '"
b00000000000000000000000000000000 /"
b00000000000000000000000000000000 7"
b00000000000000000000000000000000 ?"
0G"
0O"
0W"
b000 _"
b000 g"
b000000 o"
b00000 w"
b000000 !#
b00000000000000000000000000000000 )#
b00000 1#
b0000000000000000000000000000000000000000000000000000000000000000 9#
b0000000000000000000000000000000000000000000000000000000000000000 I#
b0000000000000000000000000000000000000000000000000000000000000000 Y#
b0000000000000000000000000000000000000000000000000000000000000000 i#
b0000000000000000000000000000000000000000000000000000000000000000 y#
0+$
03$
0;$
0C$
b00000000000000000000000000000000 K$
b00000000000000000000000000000000 S$
b00000000000000000000000000000000 [$
b00000000000000000000000000000000 c$
b00000000000000000000000000000000 k$
b00000000000000000000000000000100 s$
1{$
b00000000000000000000000000000000 %%
b00000000000000000000000000000000 -%
b000000 5%
b00000 =%
b00000 E%
b00000 M%
b0000000000000000 U%
b00000000000000000000000000 ]%
b00000000000000000000000000000000 e%
b00 m%
0u%
0}%
b00 '&
b000000 /&
07&
0?&
0G&
b00000000000000000000000000000000 O&
b00000000000000000000000000000000 W&
b00000 _&
b00000 g&
b00000 o&
b00000000000000000000000000000000 w&
b00000000000000000000000000000100 !'
b00000000000000000000000000000000 )'
b00000000000000000000000000000000 1'
09'
0A'
0I'
0Q'
b00000000000000000000000000000000 Y'
b00000000000000000000000000000000 a'
b00000000000000000000000000000000 i'
b00000000000000000000000000000000 q'
0y'
b00000000000000000000000000000000 #(
b00000000000000000000000000000000 +(
03(
0;(
b00000000000000000000000000000000 C(
b00000000000000000000000000000000 K(
b00000000000000000000000000000000 S(
b00000000000000000000000000000000 T(
b00000000000000000000000000000000 U(
b00000000000000000000000000000000 V(
b00000000000000000000000000000000 W(
b00000000000000000000000000000000 X(
b00000000000000000000000000000000 Y(
b00000000000000000000000000000000 Z(
b00000000000000000000000000000000 [(
b00000000000000000000000000000000 \(
b00000000000000000000000000000000 ](
b00000000000000000000000000000000 ^(
b00000000000000000000000000000000 _(
b00000000000000000000000000000000 `(
b00000000000000000000000000000000 a(
b00000000000000000000000000000000 b(
b00000000000000000000000000000000 c(
b00000000000000000000000000000000 d(
b00000000000000000000000000000000 e(
b00000000000000000000000000000000 f(
b00000000000000000000000000000000 g(
b00000000000000000000000000000000 h(
b00000000000000000000000000000000 i(
b00000000000000000000000000000000 j(
b00000000000000000000000000000000 k(
b00000000000000000000000000000000 l(
b00000000000000000000000000000000 m(
b00000000000000000000000000000000 n(
b00000000000000000000000000000000 o(
b00000000000000000000000000000000 p(
b00000000000000000000000000000000 q(
b00000000000000000000000000000000 r(
09+
0A+
0I+
0Q+
b00000 Y+
0a+
0i+
b00000000000000000000000000000000 q+
b00000000000000000000000000000000 y+
0#,
0+,
03,
b00000 ;,
b00000000000000000000000000000000 C,
b00000000000000000000000000000000 K,
0S,
0[,
0c,
b00000000000000000000000000000000 k,
1s,
b00000000000000000000000000000000 {,
b00000000000000000000000000000000 %-
b00000000000000000000000000000000 --
05-
0=-
b00000000000000000000000000000000 E-
b00000000000000000000000000000000 M-
0U-
0]-
b00000000000000000000000000000000 e-
0m-
0u-
1}-
b00000000000000000000000000000100 '.
b00000000000000000000000000100000 /.
b00000000000000000000000000000101 7.
b11111 ?.
b00000 G.
#2
1#
0+
b00000000000000000000000000000100 3
b00000000000000000000000000001000 K
b00000000000000000000000000001000 S
b00000000000000000000000000000100 k$
b00000000000000000000000000001000 s$
0{$
b00000000000000000000000000000100 -%
b01 m%
1I+
1S,
1c,
b00000000000000000000000000000100 {,
#3
0#
1+
0S,
#3
b00000000000000000000000000000000 3
b10111111110000000000000000000100 K
b10111111110000000000000000000100 S
b10111111110000000000000000000000 k$
b10111111110000000000000000000100 s$
b00000000000000000000000000000000 -%
b00 m%
0I+
1[,
b10111111110000000000000000000000 {,
b00100100000000100000000100000000 %-
#4
1#
0+
1S,
#5
0#
1+
0S,
#5
0[,
#6
1#
0+
b10111111110000000000010000000100 3
b00000000000000000000010000000000 ;
b00000000000000000000000100000000 C
b10111111110000000000000000001000 K
b10111111110000000000000000001000 S
b01 %!
b00 -!
b100001 =!
b001001 o"
b00010 w"
b10111111110000000000000000000100 k$
b10111111110000000000000000001000 s$
b00100100000000100000000100000000 %%
b10111111110000000000000000000100 -%
b001001 5%
b00010 E%
b0000000100000000 U%
b00000000100000000100000000 ]%
b10110000000010000000010000000000 e%
b01 m%
1I+
1S,
b10111111110000000000000000000100 {,
b10001100000000100000000001100100 %-
#7
0#
1+
0S,
#7
#8
1#
0+
b10111111110000000000000110011000 3
b00000000000000000000000110010000 ;
b00000000000000000000000001100100 C
b10111111110000000000000000001100 K
b10111111110000000000000000001100 S
1s
b00010 m!
b00000000000000000000000100000000 }!
b00000000000000000000000100000000 '"
b100011 o"
b100100 !#
b0000000000000000000000000000000000000000000000000000000100000000 I#
b0000000000000000000000000000000000000000000000000000000100000000 i#
b10111111110000000000000000001000 k$
b10111111110000000000000000001100 s$
b10001100000000100000000001100100 %%
b10111111110000000000000000001000 -%
b100011 5%
b0000000001100100 U%
b00000000100000000001100100 ]%
b10110000000010000000000110010000 e%
b00 m%
b01 '&
b100001 /&
b00010 g&
b00000000000000000000000100000000 w&
b10111111110000000000000000001000 !'
b10111111110000000000000000000100 )'
b10110000000010000000010000000000 1'
1Q+
1S,
b10111111110000000000000000001000 {,
b00000000000000000000000000001000 %-
#9
0#
1+
0S,
#9
#10
1#
0+
b10111111110000000000000000101100 3
b00000000000000000000000000100000 ;
b00000000000000000000000000001000 C
b10111111110000000000000000010000 K
b10111111110000000000000000010000 S
0s
b00 %!
b01 -!
b001000 =!
1E!
b00000000000000000000000001100100 }!
b00000000000000000000000001100100 '"
b010 g"
b000000 o"
b00000 w"
b001000 !#
b00000000000000000000000100000000 )#
b0000000000000000000000000000000000000000000000000000000001100100 I#
b0000000000000000000000000000000000000000000000000000000001100100 i#
b10111111110000000000000000001100 k$
b10111111110000000000000000010000 s$
b00000000000000000000000000001000 %%
b10111111110000000000000000001100 -%
b000000 5%
b00000 E%
b0000000000001000 U%
b00000000000000000000001000 ]%
b10110000000000000000000000100000 e%
1u%
b00000000000000000000000001100100 w&
b10111111110000000000000000001100 !'
b10111111110000000000000000001000 )'
b10110000000010000000000110010000 1'
b00000000000000000000000100000000 Y'
b00000000000000000000000100000000 i'
b10110000000010000000010000000000 q'
b00010 Y+
1#,
1S,
b10111111110000000000000000001100 {,
b00000000000000000000000000000000 %-
b00000000000000000000000100000000 --
#11
0#
1+
0S,
#11
#12
1#
0+
b10111111110000000000000000010000 3
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 C
b10111111110000000000000000010100 K
b10111111110000000000000000010100 S
b000000 =!
0E!
b00000 m!
b00000000000000000000000000000000 }!
b00000000000000000000000000000000 '"
b00000000000000000000000100000000 ?"
1G"
1O"
b000 g"
b000000 !#
b00000000000000000000000000000000 )#
b0000000000000000000000000000000000000000000000000000000000000000 I#
b0000000000000000000000000000000000000000000000000000000000000000 i#
b10111111110000000000000000010000 k$
b10111111110000000000000000010100 s$
b00000000000000000000000000000000 %%
b10111111110000000000000000010000 -%
b0000000000000000 U%
b00000000000000000000000000 ]%
b10110000000000000000000000000000 e%
b01 m%
0u%
b00 '&
b001000 /&
17&
b00000 g&
b00000000000000000000000000001000 w&
b10111111110000000000000000010000 !'
b10111111110000000000000000001100 )'
b10110000000000000000000000100000 1'
19'
b00000000000000000000000001100100 Y'
b00000000000000000000000001100100 i'
b10110000000010000000000110010000 q'
b00000000000000000000000100000000 #(
b00010 ;,
1S,
b10111111110000000000000000010000 {,
b00000000000000000000000001100100 --
1=-
b00000000000000000000000001100100 M-
#13
0#
1+
b00000000000000000000000100000000 U(
0S,
b00000000000000000000000100000000 k,
#13
#14
1#
0+
b00000000000000000000000000000000 K
b00000000000000000000000001100100 ?"
0G"
0O"
b000000 /&
07&
b00000000000000000000000000000000 w&
b10111111110000000000000000010100 !'
b10111111110000000000000000010000 )'
b10110000000000000000000000000000 1'
09'
1I'
b00000000000000000000000000000000 Y'
b00000000000000000000000000000000 i'
b10110000000000000000000000100000 q'
1y'
b00000000000000000000000001100100 #(
b00000000000000000000000001100100 +(
b00000 Y+
1S,
b00000000000000000000000000000000 --
0=-
b00000000000000000000000000000000 M-
#15
0#
1+
b00000000000000000000000001100100 U(
0S,
b00000000000000000000000001100100 k,
#15
#16
1#
0+
b10111111110000000000000000010100 3
b00000000000000000000000000000100 K
b00000000000000000000000000000100 S
b00000000000000000000000000000000 ?"
b00000000000000000000000000000000 k$
b00000000000000000000000000000100 s$
1{$
b10111111110000000000000000010100 -%
0I'
b10110000000000000000000000000000 q'
0y'
b00000000000000000000000000000000 #(
b00000000000000000000000000000000 +(
b00000 ;,
1S,
0c,
b00000000000000000000000000000000 {,
#17
0#
1+
0S,
