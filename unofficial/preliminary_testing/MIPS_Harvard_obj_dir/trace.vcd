$version Generated by VerilatedVcd $end
$date Mon Dec  7 21:40:26 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 I+ active $end
  $var wire  1 9+ clk $end
  $var wire  1 Y+ clk_enable $end
  $var wire 32 q+ data_address [31:0] $end
  $var wire  1 #, data_read $end
  $var wire 32 3, data_readdata [31:0] $end
  $var wire  1 y+ data_write $end
  $var wire 32 +, data_writedata [31:0] $end
  $var wire 32 a+ instr_address [31:0] $end
  $var wire 32 i+ instr_readdata [31:0] $end
  $var wire 32 Q+ register_v0 [31:0] $end
  $var wire  1 A+ reset $end
  $scope module mips_cpu $end
   $var wire 32 m! ALU_HI_output_execute [31:0] $end
   $var wire 32 _* ALU_HI_output_memory [31:0] $end
   $var wire 32 )+ ALU_HI_output_writeback [31:0] $end
   $var wire 32 u! ALU_LO_output_execute [31:0] $end
   $var wire 32 g* ALU_LO_output_memory [31:0] $end
   $var wire 32 1+ ALU_LO_output_writeback [31:0] $end
   $var wire  6 5! ALU_function_decode [5:0] $end
   $var wire  6 U% ALU_function_execute [5:0] $end
   $var wire 32 e! ALU_output_execute [31:0] $end
   $var wire 32 O& ALU_output_memory [31:0] $end
   $var wire 32 o& ALU_output_writeback [31:0] $end
   $var wire  1 s ALU_src_B_decode $end
   $var wire  1 M% ALU_src_B_execute $end
   $var wire  1 ;, HI_LO_output $end
   $var wire  5 %% Rd_decode [4:0] $end
   $var wire  5 '& Rd_execute [4:0] $end
   $var wire  5 s$ Rs_decode [4:0] $end
   $var wire  5 u% Rs_execute [4:0] $end
   $var wire  5 {$ Rt_decode [4:0] $end
   $var wire  5 }% Rt_execute [4:0] $end
   $var wire  1 I+ active $end
   $var wire  1 %! branch_decode $end
   $var wire  1 9+ clk $end
   $var wire  1 Y+ clk_enable $end
   $var wire 32 q+ data_address [31:0] $end
   $var wire  1 #, data_read $end
   $var wire 32 3, data_readdata [31:0] $end
   $var wire  1 y+ data_write $end
   $var wire 32 +, data_writedata [31:0] $end
   $var wire  1 q# equal_decode $end
   $var wire  1 C, flush_decode_execute_register $end
   $var wire  1 7" flush_execute_register $end
   $var wire  1 ;$ flush_fetch_decode_register $end
   $var wire  1 1' forward_A_decode $end
   $var wire  2 ?" forward_A_execute [1:0] $end
   $var wire  1 9' forward_B_decode $end
   $var wire  2 G" forward_B_execute [1:0] $end
   $var wire  1 S$ halt $end
   $var wire  1 -! hi_lo_register_write_decode $end
   $var wire  1 7* hi_lo_register_write_execute $end
   $var wire  1 W* hi_lo_register_write_memory $end
   $var wire  1 w* hi_lo_register_write_writeback $end
   $var wire 16 -% immediate [15:0] $end
   $var wire 32 a+ instr_address [31:0] $end
   $var wire 32 i+ instr_readdata [31:0] $end
   $var wire 32 [$ instruction_decode [31:0] $end
   $var wire 32 i+ instruction_fetch [31:0] $end
   $var wire  1 # internal_clk $end
   $var wire  1 c memory_to_register_decode $end
   $var wire  1 =% memory_to_register_execute $end
   $var wire  1 7& memory_to_register_memory $end
   $var wire  1 _& memory_to_register_writeback $end
   $var wire  1 k memory_write_decode $end
   $var wire  1 E% memory_write_execute $end
   $var wire  1 ?& memory_write_memory $end
   $var wire  6 k$ op [5:0] $end
   $var wire 32 3 program_counter_branch_decode [31:0] $end
   $var wire 32 C$ program_counter_fetch [31:0] $end
   $var wire  1 =! program_counter_multiplexer_jump_decode $end
   $var wire  1 ]% program_counter_multiplexer_jump_execute $end
   $var wire  1 G& program_counter_multiplexer_jump_memory $end
   $var wire  1 g& program_counter_multiplexer_jump_writeback $end
   $var wire 32 S program_counter_mux_1_out [31:0] $end
   $var wire 32 c$ program_counter_plus_four_decode [31:0] $end
   $var wire 32 K$ program_counter_plus_four_fetch [31:0] $end
   $var wire 32 K program_counter_prime [31:0] $end
   $var wire  1 i# program_counter_source_decode $end
   $var wire  5 s$ read_address_1 [4:0] $end
   $var wire  5 {$ read_address_2 [4:0] $end
   $var wire 32 3, read_data_memory [31:0] $end
   $var wire 32 w& read_data_writeback [31:0] $end
   $var wire  1 { register_destination_decode $end
   $var wire  1 5% register_destination_execute $end
   $var wire 32 y# register_file_output_A_decode [31:0] $end
   $var wire 32 e% register_file_output_A_execute [31:0] $end
   $var wire 32 +$ register_file_output_A_resolved_decode [31:0] $end
   $var wire 32 #$ register_file_output_B_decode [31:0] $end
   $var wire 32 m% register_file_output_B_execute [31:0] $end
   $var wire 32 3$ register_file_output_B_resolved_decode [31:0] $end
   $var wire 32 Q+ register_v0 [31:0] $end
   $var wire  1 [ register_write_decode $end
   $var wire  1 ?* register_write_execute $end
   $var wire  1 G* register_write_memory $end
   $var wire  1 o* register_write_writeback $end
   $var wire  1 A+ reset $end
   $var wire 32 }! result_writeback [31:0] $end
   $var wire 32 ; shifter_output_decode [31:0] $end
   $var wire 32 C sign_imm_decode [31:0] $end
   $var wire 32 /& sign_imm_execute [31:0] $end
   $var wire 32 M! source_A_ALU_execute [31:0] $end
   $var wire 32 U! source_B_ALU_execute [31:0] $end
   $var wire  1 /" stall_decode $end
   $var wire  1 '" stall_fetch $end
   $var wire 32 ]! write_data_execute [31:0] $end
   $var wire 32 W& write_data_memory [31:0] $end
   $var wire  5 E! write_register_execute [4:0] $end
   $var wire  5 O* write_register_memory [4:0] $end
   $var wire  5 !+ write_register_writeback [4:0] $end
   $scope module adder_decode $end
    $var wire 32 ; a [31:0] $end
    $var wire 32 c$ b [31:0] $end
    $var wire 32 3 z [31:0] $end
   $upscope $end
   $scope module alu $end
    $var wire 64 I# ALU_HI_LO_output [63:0] $end
    $var wire 32 m! ALU_HI_output [31:0] $end
    $var wire 32 u! ALU_LO_output [31:0] $end
    $var wire  6 U% ALU_operation [5:0] $end
    $var wire 32 e! ALU_output [31:0] $end
    $var wire 64 )# extended_input_1 [63:0] $end
    $var wire 64 9# extended_input_2 [63:0] $end
    $var wire 32 M! input_1 [31:0] $end
    $var wire 32 U! input_2 [31:0] $end
    $var wire  5 _" shift_amount [4:0] $end
    $var wire 64 g" sign_extened_input_1 [63:0] $end
    $var wire 64 w" sign_extened_input_2 [63:0] $end
   $upscope $end
   $scope module control_unit $end
    $var wire  6 5! ALU_function [5:0] $end
    $var wire  1 s ALU_src_B $end
    $var wire  1 %! branch $end
    $var wire  6 W" funct [5:0] $end
    $var wire  1 -! hi_lo_register_write $end
    $var wire 32 [$ instruction [31:0] $end
    $var wire  1 c memory_to_register $end
    $var wire  1 k memory_write $end
    $var wire  6 O" op [5:0] $end
    $var wire  1 =! program_counter_multiplexer_jump $end
    $var wire  1 { register_destination $end
    $var wire  1 [ register_write $end
    $var wire  5 {$ rt [4:0] $end
   $upscope $end
   $scope module decode_execute_register $end
    $var wire  6 5! ALU_function_decode [5:0] $end
    $var wire  6 U% ALU_function_execute [5:0] $end
    $var wire  1 s ALU_src_B_decode $end
    $var wire  1 M% ALU_src_B_execute $end
    $var wire  5 %% Rd_decode [4:0] $end
    $var wire  5 '& Rd_execute [4:0] $end
    $var wire  5 s$ Rs_decode [4:0] $end
    $var wire  5 u% Rs_execute [4:0] $end
    $var wire  5 {$ Rt_decode [4:0] $end
    $var wire  5 }% Rt_execute [4:0] $end
    $var wire  1 7" clear $end
    $var wire  1 # clk $end
    $var wire  1 -! hi_lo_register_write_decode $end
    $var wire  1 7* hi_lo_register_write_execute $end
    $var wire  1 c memory_to_register_decode $end
    $var wire  1 =% memory_to_register_execute $end
    $var wire  1 k memory_write_decode $end
    $var wire  1 E% memory_write_execute $end
    $var wire  1 =! program_counter_multiplexer_jump_decode $end
    $var wire  1 ]% program_counter_multiplexer_jump_execute $end
    $var wire 32 y# read_data_one_decode [31:0] $end
    $var wire 32 e% read_data_one_execute [31:0] $end
    $var wire 32 #$ read_data_two_decode [31:0] $end
    $var wire 32 m% read_data_two_execute [31:0] $end
    $var wire  1 { register_destination_decode $end
    $var wire  1 5% register_destination_execute $end
    $var wire  1 [ register_write_decode $end
    $var wire  1 ?* register_write_execute $end
    $var wire  1 A+ reset $end
    $var wire 32 C sign_imm_decode [31:0] $end
    $var wire 32 /& sign_imm_execute [31:0] $end
   $upscope $end
   $scope module execute_memory_register $end
    $var wire 32 m! ALU_HI_output_execute [31:0] $end
    $var wire 32 _* ALU_HI_output_memory [31:0] $end
    $var wire 32 u! ALU_LO_output_execute [31:0] $end
    $var wire 32 g* ALU_LO_output_memory [31:0] $end
    $var wire 32 e! ALU_output_execute [31:0] $end
    $var wire 32 O& ALU_output_memory [31:0] $end
    $var wire  1 # clk $end
    $var wire  1 7* hi_lo_register_write_execute $end
    $var wire  1 W* hi_lo_register_write_memory $end
    $var wire  1 =% memory_to_register_execute $end
    $var wire  1 7& memory_to_register_memory $end
    $var wire  1 E% memory_write_execute $end
    $var wire  1 ?& memory_write_memory $end
    $var wire  1 ]% program_counter_multiplexer_jump_execute $end
    $var wire  1 G& program_counter_multiplexer_jump_memory $end
    $var wire  1 ?* register_write_execute $end
    $var wire  1 G* register_write_memory $end
    $var wire  1 A+ reset $end
    $var wire 32 ]! write_data_execute [31:0] $end
    $var wire 32 W& write_data_memory [31:0] $end
    $var wire  5 E! write_register_execute [4:0] $end
    $var wire  5 O* write_register_memory [4:0] $end
   $upscope $end
   $scope module fetch_decode_register $end
    $var wire  1 ;$ clear $end
    $var wire  1 # clk $end
    $var wire  1 /" enable $end
    $var wire 32 [$ instruction_decode [31:0] $end
    $var wire 32 i+ instruction_fetch [31:0] $end
    $var wire 32 c$ program_counter_plus_four_decode [31:0] $end
    $var wire 32 K$ program_counter_plus_four_fetch [31:0] $end
    $var wire  1 A+ reset $end
   $upscope $end
   $scope module hazard_unit $end
    $var wire  5 s$ Rs_decode [4:0] $end
    $var wire  5 u% Rs_execute [4:0] $end
    $var wire  5 {$ Rt_decode [4:0] $end
    $var wire  5 }% Rt_execute [4:0] $end
    $var wire  1 %! branch_decode $end
    $var wire  1 a# branchstall $end
    $var wire  1 7" flush_execute_register $end
    $var wire  1 1' forward_register_file_output_1_decode $end
    $var wire  2 ?" forward_register_file_output_1_execute [1:0] $end
    $var wire  1 9' forward_register_file_output_2_decode $end
    $var wire  2 G" forward_register_file_output_2_execute [1:0] $end
    $var wire  1 Y# lwstall $end
    $var wire  1 =% memory_to_register_execute $end
    $var wire  1 7& memory_to_register_memory $end
    $var wire  1 g& program_counter_multiplexer_jump_writeback $end
    $var wire  1 ?* register_write_execute $end
    $var wire  1 G* register_write_memory $end
    $var wire  1 o* register_write_writeback $end
    $var wire  1 /" stall_decode $end
    $var wire  1 '" stall_fetch $end
    $var wire  5 E! write_register_execute [4:0] $end
    $var wire  5 O* write_register_memory [4:0] $end
    $var wire  5 !+ write_register_writeback [4:0] $end
   $upscope $end
   $scope module memory_writeback_register $end
    $var wire 32 _* ALU_HI_output_memory [31:0] $end
    $var wire 32 )+ ALU_HI_output_writeback [31:0] $end
    $var wire 32 g* ALU_LO_output_memory [31:0] $end
    $var wire 32 1+ ALU_LO_output_writeback [31:0] $end
    $var wire 32 O& ALU_output_memory [31:0] $end
    $var wire 32 o& ALU_output_writeback [31:0] $end
    $var wire  1 # clk $end
    $var wire  1 W* hi_lo_register_write_memory $end
    $var wire  1 w* hi_lo_register_write_writeback $end
    $var wire  1 7& memory_to_register_memory $end
    $var wire  1 _& memory_to_register_writeback $end
    $var wire  1 G& program_counter_multiplexer_jump_memory $end
    $var wire  1 g& program_counter_multiplexer_jump_writeback $end
    $var wire 32 3, read_data_memory [31:0] $end
    $var wire 32 w& read_data_writeback [31:0] $end
    $var wire  1 G* register_write_memory $end
    $var wire  1 o* register_write_writeback $end
    $var wire  1 A+ reset $end
    $var wire  5 O* write_register_memory [4:0] $end
    $var wire  5 !+ write_register_writeback [4:0] $end
   $upscope $end
   $scope module or_gate $end
    $var wire  1 g& input_A $end
    $var wire  1 i# input_B $end
    $var wire  1 ;$ output_C $end
   $upscope $end
   $scope module pc $end
    $var wire 32 K address_input [31:0] $end
    $var wire 32 C$ address_output [31:0] $end
    $var wire  1 # clk $end
    $var wire  1 '" enable $end
    $var wire  1 S$ halt $end
    $var wire  1 A+ reset $end
   $upscope $end
   $scope module plus_four_adder $end
    $var wire 32 C$ a [31:0] $end
    $var wire 32 S, b [31:0] $end
    $var wire 32 K$ z [31:0] $end
   $upscope $end
   $scope module program_counter_multiplexer $end
    $var wire 32 [, BUS_WIDTH [31:0] $end
    $var wire  1 i# control $end
    $var wire 32 K$ input_0 [31:0] $end
    $var wire 32 3 input_1 [31:0] $end
    $var wire 32 S resolved [31:0] $end
   $upscope $end
   $scope module program_counter_multiplexer_two $end
    $var wire 32 [, BUS_WIDTH [31:0] $end
    $var wire  1 g& control $end
    $var wire 32 S input_0 [31:0] $end
    $var wire 32 }! input_1 [31:0] $end
    $var wire 32 K resolved [31:0] $end
   $upscope $end
   $scope module program_counter_source_and_gate_decode $end
    $var wire  1 %! input_A $end
    $var wire  1 q# input_B $end
    $var wire  1 i# output_C $end
   $upscope $end
   $scope module reg_output_comparator $end
    $var wire 32 +$ a [31:0] $end
    $var wire 32 3$ b [31:0] $end
    $var wire  1 q# c $end
    $var wire  6 k$ op [5:0] $end
    $var wire  5 {$ rt [4:0] $end
   $upscope $end
   $scope module register_file $end
    $var wire  1 ;, HI_LO_output $end
    $var wire 32 '* HI_reg [31:0] $end
    $var wire 32 )+ HI_write_data [31:0] $end
    $var wire 32 /* LO_reg [31:0] $end
    $var wire 32 1+ LO_write_data [31:0] $end
    $var wire  1 # clk $end
    $var wire  1 w* hi_lo_register_write_enable $end
    $var wire  1 + modified_write_clk $end
    $var wire  1 K, pipelined $end
    $var wire  5 s$ read_address_1 [4:0] $end
    $var wire  5 {$ read_address_2 [4:0] $end
    $var wire 32 y# read_data_1 [31:0] $end
    $var wire 32 !' read_data_1_pre_mux [31:0] $end
    $var wire 32 #$ read_data_2 [31:0] $end
    $var wire 32 )' read_data_2_pre_mux [31:0] $end
    $var wire 32 Q+ read_register_2 [31:0] $end
    $var wire 32 A' registers(0) [31:0] $end
    $var wire 32 B' registers(1) [31:0] $end
    $var wire 32 K' registers(10) [31:0] $end
    $var wire 32 L' registers(11) [31:0] $end
    $var wire 32 M' registers(12) [31:0] $end
    $var wire 32 N' registers(13) [31:0] $end
    $var wire 32 O' registers(14) [31:0] $end
    $var wire 32 P' registers(15) [31:0] $end
    $var wire 32 Q' registers(16) [31:0] $end
    $var wire 32 R' registers(17) [31:0] $end
    $var wire 32 S' registers(18) [31:0] $end
    $var wire 32 T' registers(19) [31:0] $end
    $var wire 32 C' registers(2) [31:0] $end
    $var wire 32 U' registers(20) [31:0] $end
    $var wire 32 V' registers(21) [31:0] $end
    $var wire 32 W' registers(22) [31:0] $end
    $var wire 32 X' registers(23) [31:0] $end
    $var wire 32 Y' registers(24) [31:0] $end
    $var wire 32 Z' registers(25) [31:0] $end
    $var wire 32 [' registers(26) [31:0] $end
    $var wire 32 \' registers(27) [31:0] $end
    $var wire 32 ]' registers(28) [31:0] $end
    $var wire 32 ^' registers(29) [31:0] $end
    $var wire 32 D' registers(3) [31:0] $end
    $var wire 32 _' registers(30) [31:0] $end
    $var wire 32 `' registers(31) [31:0] $end
    $var wire 32 E' registers(4) [31:0] $end
    $var wire 32 F' registers(5) [31:0] $end
    $var wire 32 G' registers(6) [31:0] $end
    $var wire 32 H' registers(7) [31:0] $end
    $var wire 32 I' registers(8) [31:0] $end
    $var wire 32 J' registers(9) [31:0] $end
    $var wire  5 !+ write_address [4:0] $end
    $var wire 32 }! write_data [31:0] $end
    $var wire  1 o* write_enable $end
   $upscope $end
   $scope module register_file_output_A_execute_mux $end
    $var wire 32 [, BUS_WIDTH [31:0] $end
    $var wire  2 ?" control [1:0] $end
    $var wire 32 e% input_0 [31:0] $end
    $var wire 32 }! input_1 [31:0] $end
    $var wire 32 O& input_2 [31:0] $end
    $var wire 32 1+ input_3 [31:0] $end
    $var wire 32 M! resolved [31:0] $end
   $upscope $end
   $scope module register_file_output_A_mux $end
    $var wire 32 [, BUS_WIDTH [31:0] $end
    $var wire  1 1' control $end
    $var wire 32 y# input_0 [31:0] $end
    $var wire 32 O& input_1 [31:0] $end
    $var wire 32 +$ resolved [31:0] $end
   $upscope $end
   $scope module register_file_output_B_execute_mux $end
    $var wire 32 [, BUS_WIDTH [31:0] $end
    $var wire  2 G" control [1:0] $end
    $var wire 32 m% input_0 [31:0] $end
    $var wire 32 }! input_1 [31:0] $end
    $var wire 32 O& input_2 [31:0] $end
    $var wire 32 )+ input_3 [31:0] $end
    $var wire 32 ]! resolved [31:0] $end
   $upscope $end
   $scope module register_file_output_B_mux $end
    $var wire 32 [, BUS_WIDTH [31:0] $end
    $var wire  1 9' control $end
    $var wire 32 #$ input_0 [31:0] $end
    $var wire 32 O& input_1 [31:0] $end
    $var wire 32 3$ resolved [31:0] $end
   $upscope $end
   $scope module shifter_decode $end
    $var wire 32 c, shift_distance [31:0] $end
    $var wire 32 C shift_input [31:0] $end
    $var wire 32 ; shift_output [31:0] $end
   $upscope $end
   $scope module sign_extender_decode $end
    $var wire 32 C extended_output [31:0] $end
    $var wire 16 -% short_input [15:0] $end
   $upscope $end
   $scope module source_B_ALU_mux $end
    $var wire 32 [, BUS_WIDTH [31:0] $end
    $var wire  1 M% control $end
    $var wire 32 ]! input_0 [31:0] $end
    $var wire 32 /& input_1 [31:0] $end
    $var wire 32 U! resolved [31:0] $end
   $upscope $end
   $scope module write_register_execute_mux $end
    $var wire 32 k, BUS_WIDTH [31:0] $end
    $var wire  1 5% control $end
    $var wire  5 }% input_0 [4:0] $end
    $var wire  5 '& input_1 [4:0] $end
    $var wire  5 E! resolved [4:0] $end
   $upscope $end
   $scope module writeback_mux $end
    $var wire 32 [, BUS_WIDTH [31:0] $end
    $var wire  1 _& control $end
    $var wire 32 o& input_0 [31:0] $end
    $var wire 32 w& input_1 [31:0] $end
    $var wire 32 }! resolved [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
1+
b00000000000000000000000000000000 3
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 C
b00000000000000000000000000000100 K
b00000000000000000000000000000100 S
1[
0c
0k
0s
1{
0%!
0-!
b000000 5!
0=!
b00000 E!
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 U!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 e!
b00000000000000000000000000000000 m!
b00000000000000000000000000000000 u!
b00000000000000000000000000000000 }!
0'"
0/"
07"
b00 ?"
b00 G"
b000000 O"
b000000 W"
b00000 _"
b0000000000000000000000000000000000000000000000000000000000000000 g"
b0000000000000000000000000000000000000000000000000000000000000000 w"
b0000000000000000000000000000000000000000000000000000000000000000 )#
b0000000000000000000000000000000000000000000000000000000000000000 9#
b0000000000000000000000000000000000000000000000000000000000000000 I#
0Y#
0a#
0i#
0q#
b00000000000000000000000000000000 y#
b00000000000000000000000000000000 #$
b00000000000000000000000000000000 +$
b00000000000000000000000000000000 3$
0;$
b00000000000000000000000000000000 C$
b00000000000000000000000000000100 K$
1S$
b00000000000000000000000000000000 [$
b00000000000000000000000000000000 c$
b000000 k$
b00000 s$
b00000 {$
b00000 %%
b0000000000000000 -%
05%
0=%
0E%
0M%
b000000 U%
0]%
b00000000000000000000000000000000 e%
b00000000000000000000000000000000 m%
b00000 u%
b00000 }%
b00000 '&
b00000000000000000000000000000000 /&
07&
0?&
0G&
b00000000000000000000000000000000 O&
b00000000000000000000000000000000 W&
0_&
0g&
b00000000000000000000000000000000 o&
b00000000000000000000000000000000 w&
b00000000000000000000000000000000 !'
b00000000000000000000000000000000 )'
01'
09'
b00000000000000000000000000000000 A'
b00000000000000000000000000000000 B'
b00000000000000000000000000000000 C'
b00000000000000000000000000000000 D'
b00000000000000000000000000000000 E'
b00000000000000000000000000000000 F'
b00000000000000000000000000000000 G'
b00000000000000000000000000000000 H'
b00000000000000000000000000000000 I'
b00000000000000000000000000000000 J'
b00000000000000000000000000000000 K'
b00000000000000000000000000000000 L'
b00000000000000000000000000000000 M'
b00000000000000000000000000000000 N'
b00000000000000000000000000000000 O'
b00000000000000000000000000000000 P'
b00000000000000000000000000000000 Q'
b00000000000000000000000000000000 R'
b00000000000000000000000000000000 S'
b00000000000000000000000000000000 T'
b00000000000000000000000000000000 U'
b00000000000000000000000000000000 V'
b00000000000000000000000000000000 W'
b00000000000000000000000000000000 X'
b00000000000000000000000000000000 Y'
b00000000000000000000000000000000 Z'
b00000000000000000000000000000000 ['
b00000000000000000000000000000000 \'
b00000000000000000000000000000000 ]'
b00000000000000000000000000000000 ^'
b00000000000000000000000000000000 _'
b00000000000000000000000000000000 `'
b00000000000000000000000000000000 '*
b00000000000000000000000000000000 /*
07*
0?*
0G*
b00000 O*
0W*
b00000000000000000000000000000000 _*
b00000000000000000000000000000000 g*
0o*
0w*
b00000 !+
b00000000000000000000000000000000 )+
b00000000000000000000000000000000 1+
09+
0A+
0I+
b00000000000000000000000000000000 Q+
1Y+
b00000000000000000000000000000000 a+
b00000000000000000000000000000000 i+
b00000000000000000000000000000000 q+
0y+
0#,
b00000000000000000000000000000000 +,
b00000000000000000000000000000000 3,
0;,
0C,
1K,
b00000000000000000000000000000100 S,
b00000000000000000000000000100000 [,
b00000000000000000000000000000010 c,
b00000000000000000000000000000101 k,
#2
1#
0+
b00000000000000000000000000000100 3
b00000000000000000000000000001000 K
b00000000000000000000000000001000 S
b00000000000000000000000000000100 C$
b00000000000000000000000000001000 K$
0S$
b00000000000000000000000000000100 c$
15%
1?*
19+
1I+
b00000000000000000000000000000100 a+
#3
0#
1+
09+
#3
b00000000000000000000000000000000 3
b10111111110000000000000000000100 K
b10111111110000000000000000000100 S
b10111111110000000000000000000000 C$
b10111111110000000000000000000100 K$
b00000000000000000000000000000000 c$
05%
0?*
1A+
b10111111110000000000000000000000 a+
b00100100000000100000000100000000 i+
#4
1#
0+
19+
#5
0#
1+
09+
#5
0A+
#6
1#
0+
b10111111110000000000010000000100 3
b00000000000000000000010000000000 ;
b00000000000000000000000100000000 C
b10111111110000000000000000001000 K
b10111111110000000000000000001000 S
1s
0{
b100001 5!
b001001 O"
b10111111110000000000000000000100 C$
b10111111110000000000000000001000 K$
b00100100000000100000000100000000 [$
b10111111110000000000000000000100 c$
b001001 k$
b00010 {$
b0000000100000000 -%
15%
1?*
19+
b10111111110000000000000000000100 a+
b10001100000000100000000001100100 i+
#7
0#
1+
09+
#7
#8
1#
0+
b10111111110000000000000110011000 3
b00000000000000000000000110010000 ;
b00000000000000000000000001100100 C
b10111111110000000000000000001100 K
b10111111110000000000000000001100 S
1c
b00010 E!
b00000000000000000000000100000000 U!
b00000000000000000000000100000000 e!
b100011 O"
b100100 W"
b0000000000000000000000000000000000000000000000000000000100000000 w"
b0000000000000000000000000000000000000000000000000000000100000000 9#
b10111111110000000000000000001000 C$
b10111111110000000000000000001100 K$
b10001100000000100000000001100100 [$
b10111111110000000000000000001000 c$
b100011 k$
b0000000001100100 -%
05%
1M%
b100001 U%
b00010 }%
b00000000000000000000000100000000 /&
1G*
19+
b10111111110000000000000000001000 a+
b00000000000000000000000000001000 i+
#9
0#
1+
09+
#9
#10
1#
0+
b10111111110000000000000000101100 3
b00000000000000000000000000100000 ;
b00000000000000000000000000001000 C
b10111111110000000000000000010000 K
b10111111110000000000000000010000 S
0c
0s
1{
b001000 5!
1=!
b00000000000000000000000001100100 U!
b00000000000000000000000100000000 ]!
b00000000000000000000000001100100 e!
b10 G"
b000000 O"
b001000 W"
b0000000000000000000000000000000000000000000000000000000001100100 w"
b0000000000000000000000000000000000000000000000000000000001100100 9#
b10111111110000000000000000001100 C$
b10111111110000000000000000010000 K$
b00000000000000000000000000001000 [$
b10111111110000000000000000001100 c$
b000000 k$
b00000 {$
b0000000000001000 -%
1=%
b00000000000000000000000001100100 /&
b00000000000000000000000100000000 O&
b00010 O*
1o*
19+
b10111111110000000000000000001100 a+
b00000000000000000000000000000000 i+
b00000000000000000000000100000000 q+
#11
0#
1+
09+
#11
#12
1#
0+
b10111111110000000000000000010000 3
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 C
b10111111110000000000000000010100 K
b10111111110000000000000000010100 S
b000000 5!
0=!
b00000 E!
b00000000000000000000000000000000 U!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 e!
b00000000000000000000000100000000 }!
b00 G"
b000000 W"
b0000000000000000000000000000000000000000000000000000000000000000 w"
b0000000000000000000000000000000000000000000000000000000000000000 9#
b10111111110000000000000000010000 C$
b10111111110000000000000000010100 K$
b00000000000000000000000000000000 [$
b10111111110000000000000000010000 c$
b0000000000000000 -%
15%
0=%
0M%
b001000 U%
1]%
b00000 }%
b00000000000000000000000000001000 /&
17&
b00000000000000000000000001100100 O&
b00000000000000000000000100000000 W&
b00000000000000000000000100000000 o&
b00010 !+
19+
b10111111110000000000000000010000 a+
b00000000000000000000000001100100 q+
1#,
b00000000000000000000000100000000 +,
b00000000000000000000000001100100 3,
#13
0#
1+
b00000000000000000000000100000000 C'
09+
b00000000000000000000000100000000 Q+
#13
#14
1#
0+
b10111111110000000000000000010100 3
b10111111110000000000000000011000 K
b10111111110000000000000000011000 S
b00000000000000000000000001100100 }!
b10111111110000000000000000010100 C$
b10111111110000000000000000011000 K$
b10111111110000000000000000010100 c$
b000000 U%
0]%
b00000000000000000000000000000000 /&
07&
1G&
b00000000000000000000000000000000 O&
b00000000000000000000000000000000 W&
1_&
b00000000000000000000000001100100 o&
b00000000000000000000000001100100 w&
b00000 O*
19+
b10111111110000000000000000010100 a+
b00000000000000000000000000000000 q+
0#,
b00000000000000000000000000000000 +,
b00000000000000000000000000000000 3,
#15
0#
1+
b00000000000000000000000001100100 C'
09+
b00000000000000000000000001100100 Q+
#15
#16
1#
0+
b10111111110000000000000000011000 3
b00000000000000000000000000000000 K
b10111111110000000000000000011100 S
b00000000000000000000000000000000 }!
17"
1;$
b10111111110000000000000000011000 C$
b10111111110000000000000000011100 K$
b10111111110000000000000000011000 c$
0G&
0_&
1g&
b00000000000000000000000000000000 o&
b00000000000000000000000000000000 w&
b00000 !+
19+
b10111111110000000000000000011000 a+
#17
0#
1+
09+
#17
#18
1#
0+
b00000000000000000000000000000000 3
b00000000000000000000000000000100 K
b00000000000000000000000000000100 S
07"
0;$
b00000000000000000000000000000000 C$
b00000000000000000000000000000100 K$
1S$
b00000000000000000000000000000000 c$
05%
0g&
0?*
19+
0I+
b00000000000000000000000000000000 a+
#19
0#
1+
09+
