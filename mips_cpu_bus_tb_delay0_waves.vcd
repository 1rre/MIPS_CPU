$date
	Mon Dec 14 09:34:32 2020
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module mips_cpu_bus_tb_delay0 $end
$var wire 32 ! register_v0 [31:0] $end
$var wire 32 " instr_readdata [31:0] $end
$var wire 32 # instr_address [31:0] $end
$var wire 32 $ data_writedata [31:0] $end
$var wire 1 % data_write $end
$var wire 32 & data_readdata [31:0] $end
$var wire 1 ' data_read $end
$var wire 32 ( data_address [31:0] $end
$var wire 1 ) active $end
$var reg 1 * clk $end
$var reg 1 + clk_enable $end
$var reg 1 , reset $end
$scope module cpuInst $end
$var wire 1 * clk $end
$var wire 1 + clk_enable $end
$var wire 32 - data_address [31:0] $end
$var wire 1 ' data_read $end
$var wire 1 % data_write $end
$var wire 32 . data_writedata [31:0] $end
$var wire 32 / instr_address [31:0] $end
$var wire 32 0 instruction_fetch [31:0] $end
$var wire 1 1 internal_clk $end
$var wire 1 2 program_counter_src_decode $end
$var wire 32 3 read_data_memory [31:0] $end
$var wire 1 , reset $end
$var wire 5 4 write_register_writeback [4:0] $end
$var wire 5 5 write_register_memory [4:0] $end
$var wire 5 6 write_register_execute [4:0] $end
$var wire 32 7 write_data_memory [31:0] $end
$var wire 1 8 using_HI_LO_execute $end
$var wire 1 9 using_HI_LO_decode $end
$var wire 1 : stall_fetch $end
$var wire 1 ; stall_decode $end
$var wire 32 < src_B_execute [31:0] $end
$var wire 32 = src_B_decode [31:0] $end
$var wire 32 > src_B_ALU_execute [31:0] $end
$var wire 32 ? src_A_execute [31:0] $end
$var wire 32 @ src_A_decode [31:0] $end
$var wire 32 A src_A_ALU_execute [31:0] $end
$var wire 32 B sign_imm_execute [31:0] $end
$var wire 32 C sign_imm_decode [31:0] $end
$var wire 32 D shifter_output_decode [31:0] $end
$var wire 32 E result_writeback [31:0] $end
$var wire 1 F register_write_writeback $end
$var wire 1 G register_write_memory $end
$var wire 1 H register_write_execute $end
$var wire 1 I register_write_decode $end
$var wire 32 J register_v0 [31:0] $end
$var wire 32 K register_file_output_LO_decode [31:0] $end
$var wire 32 L register_file_output_HI_decode [31:0] $end
$var wire 32 M register_file_output_B_decode [31:0] $end
$var wire 32 N register_file_output_A_decode [31:0] $end
$var wire 2 O register_destination_execute [1:0] $end
$var wire 2 P register_destination_decode [1:0] $end
$var wire 32 Q read_data_writeback [31:0] $end
$var wire 5 R read_address_2 [4:0] $end
$var wire 5 S read_address_1 [4:0] $end
$var wire 32 T program_counter_prime [31:0] $end
$var wire 32 U program_counter_plus_four_fetch [31:0] $end
$var wire 32 V program_counter_plus_four_execute [31:0] $end
$var wire 32 W program_counter_plus_four_decode [31:0] $end
$var wire 32 X program_counter_plus_eight_execute [31:0] $end
$var wire 32 Y program_counter_mux_1_out [31:0] $end
$var wire 1 Z program_counter_multiplexer_jump_memory $end
$var wire 1 [ program_counter_multiplexer_jump_execute $end
$var wire 1 \ program_counter_multiplexer_jump_decode $end
$var wire 32 ] program_counter_fetch [31:0] $end
$var wire 32 ^ program_counter_branch_decode [31:0] $end
$var wire 6 _ op [5:0] $end
$var wire 1 ` memory_write_memory $end
$var wire 1 a memory_write_execute $end
$var wire 1 b memory_write_decode $end
$var wire 1 c memory_to_register_writeback $end
$var wire 1 d memory_to_register_memory $end
$var wire 1 e memory_to_register_execute $end
$var wire 1 f memory_to_register_decode $end
$var wire 32 g j_program_counter_memory [31:0] $end
$var wire 32 h j_program_counter_execute [31:0] $end
$var wire 32 i j_program_counter_decode [31:0] $end
$var wire 26 j j_offset [25:0] $end
$var wire 1 k j_instruction_memory $end
$var wire 1 l j_instruction_execute $end
$var wire 1 m j_instruction_decode $end
$var wire 32 n instruction_decode [31:0] $end
$var wire 32 o instr_readdata [31:0] $end
$var wire 16 p immediate [15:0] $end
$var wire 1 q halt $end
$var wire 3 r forward_B_execute [2:0] $end
$var wire 1 s forward_B_decode $end
$var wire 3 t forward_A_execute [2:0] $end
$var wire 1 u forward_A_decode $end
$var wire 1 v flush_execute_register $end
$var wire 1 w equal_decode $end
$var wire 32 x data_readdata [31:0] $end
$var wire 32 y comparator_2 [31:0] $end
$var wire 32 z comparator_1 [31:0] $end
$var wire 1 { branch_decode $end
$var wire 1 ) active $end
$var wire 5 | Rt_execute [4:0] $end
$var wire 5 } Rt_decode [4:0] $end
$var wire 5 ~ Rs_execute [4:0] $end
$var wire 5 !" Rs_decode [4:0] $end
$var wire 5 "" Rd_execute [4:0] $end
$var wire 5 #" Rd_decode [4:0] $end
$var wire 1 $" LO_register_write_writeback $end
$var wire 1 %" LO_register_write_memory $end
$var wire 1 &" LO_register_write_execute $end
$var wire 1 '" LO_register_write_decode $end
$var wire 1 (" HI_register_write_writeback $end
$var wire 1 )" HI_register_write_memory $end
$var wire 1 *" HI_register_write_execute $end
$var wire 1 +" HI_register_write_decode $end
$var wire 2 ," ALU_src_B_execute [1:0] $end
$var wire 2 -" ALU_src_B_decode [1:0] $end
$var wire 32 ." ALU_output_writeback [31:0] $end
$var wire 32 /" ALU_output_memory_resolved [31:0] $end
$var wire 32 0" ALU_output_memory [31:0] $end
$var wire 32 1" ALU_output_execute [31:0] $end
$var wire 6 2" ALU_function_execute [5:0] $end
$var wire 6 3" ALU_function_decode [5:0] $end
$var wire 32 4" ALU_LO_output_writeback [31:0] $end
$var wire 32 5" ALU_LO_output_memory [31:0] $end
$var wire 32 6" ALU_LO_output_execute [31:0] $end
$var wire 32 7" ALU_HI_output_writeback [31:0] $end
$var wire 32 8" ALU_HI_output_memory [31:0] $end
$var wire 32 9" ALU_HI_output_execute [31:0] $end
$var reg 32 :" write_data_execute [31:0] $end
$scope module adder_decode $end
$var wire 32 ;" a [31:0] $end
$var wire 32 <" z [31:0] $end
$var wire 32 =" b [31:0] $end
$upscope $end
$scope module alu $end
$var wire 64 >" sign_extened_input_2 [63:0] $end
$var wire 64 ?" sign_extened_input_1 [63:0] $end
$var wire 5 @" shift_amount [4:0] $end
$var wire 32 A" input_2 [31:0] $end
$var wire 32 B" input_1 [31:0] $end
$var wire 64 C" extended_input_2 [63:0] $end
$var wire 64 D" extended_input_1 [63:0] $end
$var wire 6 E" ALU_operation [5:0] $end
$var reg 64 F" ALU_HI_LO_output [63:0] $end
$var reg 32 G" ALU_HI_output [31:0] $end
$var reg 32 H" ALU_LO_output [31:0] $end
$var reg 32 I" ALU_output [31:0] $end
$upscope $end
$scope module alu_input_mux $end
$var wire 32 J" sign_imm_execute [31:0] $end
$var wire 32 K" result_writeback [31:0] $end
$var wire 32 L" read_data_2_reg [31:0] $end
$var wire 32 M" read_data_1_reg [31:0] $end
$var wire 32 N" program_counter_plus_eight_execute [31:0] $end
$var wire 3 O" forward_two_execute [2:0] $end
$var wire 3 P" forward_one_execute [2:0] $end
$var wire 32 Q" LO_result_writeback [31:0] $end
$var wire 32 R" HI_result_writeback [31:0] $end
$var wire 2 S" ALU_src_B_execute [1:0] $end
$var wire 32 T" ALU_output_memory [31:0] $end
$var wire 32 U" ALU_LO_output_memory [31:0] $end
$var wire 32 V" ALU_HI_output_memory [31:0] $end
$var reg 32 W" src_A_ALU_execute [31:0] $end
$var reg 32 X" src_B_ALU_execute [31:0] $end
$var reg 32 Y" src_mux_input_0 [31:0] $end
$upscope $end
$scope module control_unit $end
$var wire 32 Z" instruction [31:0] $end
$var reg 6 [" ALU_function [5:0] $end
$var reg 2 \" ALU_src_B [1:0] $end
$var reg 1 +" HI_register_write $end
$var reg 1 '" LO_register_write $end
$var reg 1 { branch $end
$var reg 6 ]" funct [5:0] $end
$var reg 1 m j_instruction $end
$var reg 1 f memory_to_register $end
$var reg 1 b memory_write $end
$var reg 6 ^" op [5:0] $end
$var reg 1 \ program_counter_multiplexer_jump $end
$var reg 2 _" register_destination [1:0] $end
$var reg 1 I register_write $end
$var reg 5 `" rt [4:0] $end
$var reg 1 9 using_HI_LO $end
$upscope $end
$scope module decode_execute_register $end
$var wire 6 a" ALU_function_decode [5:0] $end
$var wire 2 b" ALU_src_B_decode [1:0] $end
$var wire 1 +" HI_register_write_decode $end
$var wire 1 '" LO_register_write_decode $end
$var wire 5 c" Rd_decode [4:0] $end
$var wire 5 d" Rs_decode [4:0] $end
$var wire 5 e" Rt_decode [4:0] $end
$var wire 1 1 clk $end
$var wire 1 m j_instruction_decode $end
$var wire 32 f" j_program_counter_decode [31:0] $end
$var wire 1 f memory_to_register_decode $end
$var wire 1 b memory_write_decode $end
$var wire 1 \ program_counter_multiplexer_jump_decode $end
$var wire 2 g" register_destination_decode [1:0] $end
$var wire 1 I register_write_decode $end
$var wire 1 , reset $end
$var wire 32 h" sign_imm_decode [31:0] $end
$var wire 32 i" src_A_decode [31:0] $end
$var wire 32 j" src_B_decode [31:0] $end
$var wire 1 9 using_HI_LO_decode $end
$var wire 32 k" program_counter_plus_four_decode [31:0] $end
$var wire 1 v clear $end
$var reg 6 l" ALU_function_execute [5:0] $end
$var reg 2 m" ALU_src_B_execute [1:0] $end
$var reg 1 *" HI_register_write_execute $end
$var reg 1 &" LO_register_write_execute $end
$var reg 5 n" Rd_execute [4:0] $end
$var reg 5 o" Rs_execute [4:0] $end
$var reg 5 p" Rt_execute [4:0] $end
$var reg 1 l j_instruction_execute $end
$var reg 32 q" j_program_counter_execute [31:0] $end
$var reg 1 e memory_to_register_execute $end
$var reg 1 a memory_write_execute $end
$var reg 1 [ program_counter_multiplexer_jump_execute $end
$var reg 32 r" program_counter_plus_four_execute [31:0] $end
$var reg 2 s" register_destination_execute [1:0] $end
$var reg 1 H register_write_execute $end
$var reg 32 t" sign_imm_execute [31:0] $end
$var reg 32 u" src_A_execute [31:0] $end
$var reg 32 v" src_B_execute [31:0] $end
$var reg 1 8 using_HI_LO_execute $end
$upscope $end
$scope module execute_memory_register $end
$var wire 32 w" ALU_HI_output_execute [31:0] $end
$var wire 32 x" ALU_LO_output_execute [31:0] $end
$var wire 32 y" ALU_output_execute [31:0] $end
$var wire 1 *" HI_register_write_execute $end
$var wire 1 &" LO_register_write_execute $end
$var wire 1 1 clk $end
$var wire 1 l j_instruction_execute $end
$var wire 32 z" j_program_counter_execute [31:0] $end
$var wire 1 e memory_to_register_execute $end
$var wire 1 a memory_write_execute $end
$var wire 1 [ program_counter_multiplexer_jump_execute $end
$var wire 1 H register_write_execute $end
$var wire 1 , reset $end
$var wire 32 {" write_data_execute [31:0] $end
$var wire 5 |" write_register_execute [4:0] $end
$var reg 32 }" ALU_HI_output_memory [31:0] $end
$var reg 32 ~" ALU_LO_output_memory [31:0] $end
$var reg 32 !# ALU_output_memory [31:0] $end
$var reg 1 )" HI_register_write_memory $end
$var reg 1 %" LO_register_write_memory $end
$var reg 1 k j_instruction_memory $end
$var reg 32 "# j_program_counter_memory [31:0] $end
$var reg 1 d memory_to_register_memory $end
$var reg 1 ` memory_write_memory $end
$var reg 1 Z program_counter_multiplexer_jump_memory $end
$var reg 1 G register_write_memory $end
$var reg 32 ## write_data_memory [31:0] $end
$var reg 5 $# write_register_memory [4:0] $end
$upscope $end
$scope module fetch_decode_register $end
$var wire 1 2 clear $end
$var wire 1 1 clk $end
$var wire 32 %# instruction_fetch [31:0] $end
$var wire 1 , reset $end
$var wire 32 &# program_counter_plus_four_fetch [31:0] $end
$var wire 1 ; enable $end
$var reg 32 '# instruction_decode [31:0] $end
$var reg 32 (# program_counter_plus_four_decode [31:0] $end
$upscope $end
$scope module hazard_unit $end
$var wire 1 )" HI_register_write_memory $end
$var wire 1 %" LO_register_write_memory $end
$var wire 5 )# Rs_decode [4:0] $end
$var wire 5 *# Rs_execute [4:0] $end
$var wire 5 +# Rt_decode [4:0] $end
$var wire 5 ,# Rt_execute [4:0] $end
$var wire 1 { branch_decode $end
$var wire 1 e memory_to_register_execute $end
$var wire 1 d memory_to_register_memory $end
$var wire 1 [ program_counter_multiplexer_jump_execute $end
$var wire 1 H register_write_execute $end
$var wire 1 G register_write_memory $end
$var wire 1 8 using_HI_LO_execute $end
$var wire 5 -# write_register_memory [4:0] $end
$var wire 5 .# write_register_writeback [4:0] $end
$var wire 5 /# write_register_execute [4:0] $end
$var wire 1 F register_write_writeback $end
$var wire 1 $" LO_register_write_writeback $end
$var wire 1 (" HI_register_write_writeback $end
$var reg 1 0# branchstall $end
$var reg 1 v flush_execute_register $end
$var reg 1 u forward_register_file_output_A_decode $end
$var reg 3 1# forward_register_file_output_A_execute [2:0] $end
$var reg 1 s forward_register_file_output_B_decode $end
$var reg 3 2# forward_register_file_output_B_execute [2:0] $end
$var reg 1 3# lwstall $end
$var reg 1 ; stall_decode $end
$var reg 1 : stall_fetch $end
$upscope $end
$scope module memory_writeback_register $end
$var wire 32 4# ALU_HI_output_memory [31:0] $end
$var wire 32 5# ALU_LO_output_memory [31:0] $end
$var wire 32 6# ALU_output_memory [31:0] $end
$var wire 1 )" HI_register_write_memory $end
$var wire 1 %" LO_register_write_memory $end
$var wire 1 1 clk $end
$var wire 1 d memory_to_register_memory $end
$var wire 32 7# read_data_memory [31:0] $end
$var wire 1 G register_write_memory $end
$var wire 1 , reset $end
$var wire 5 8# write_register_memory [4:0] $end
$var reg 32 9# ALU_HI_output_writeback [31:0] $end
$var reg 32 :# ALU_LO_output_writeback [31:0] $end
$var reg 32 ;# ALU_output_writeback [31:0] $end
$var reg 1 (" HI_register_write_writeback $end
$var reg 1 $" LO_register_write_writeback $end
$var reg 1 c memory_to_register_writeback $end
$var reg 32 <# read_data_writeback [31:0] $end
$var reg 1 F register_write_writeback $end
$var reg 5 =# write_register_writeback [4:0] $end
$upscope $end
$scope module pc $end
$var wire 1 1 clk $end
$var wire 1 : enable $end
$var wire 1 , reset $end
$var wire 32 ># address_input [31:0] $end
$var reg 32 ?# address_output [31:0] $end
$var reg 1 q halt $end
$upscope $end
$scope module plus_four_adder $end
$var wire 32 @# a [31:0] $end
$var wire 32 A# b [31:0] $end
$var wire 32 B# z [31:0] $end
$upscope $end
$scope module plus_four_adder_execute $end
$var wire 32 C# a [31:0] $end
$var wire 32 D# b [31:0] $end
$var wire 32 E# z [31:0] $end
$upscope $end
$scope module program_counter_multiplexer $end
$var wire 1 2 control $end
$var wire 32 F# input_0 [31:0] $end
$var wire 32 G# input_1 [31:0] $end
$var wire 32 H# resolved [31:0] $end
$upscope $end
$scope module program_counter_multiplexer_two $end
$var wire 1 Z control $end
$var wire 32 I# input_0 [31:0] $end
$var wire 32 J# input_1 [31:0] $end
$var wire 32 K# resolved [31:0] $end
$upscope $end
$scope module reg_output_comparator $end
$var wire 32 L# a [31:0] $end
$var wire 32 M# b [31:0] $end
$var wire 6 N# op [5:0] $end
$var wire 5 O# rt [4:0] $end
$var reg 1 w c $end
$upscope $end
$scope module register_file $end
$var wire 32 P# HI_write_data [31:0] $end
$var wire 1 (" HI_write_enable $end
$var wire 32 Q# LO_write_data [31:0] $end
$var wire 1 $" LO_write_enable $end
$var wire 1 1 clk $end
$var wire 1 R# modified_write_clk $end
$var wire 1 S# pipelined $end
$var wire 5 T# read_address_1 [4:0] $end
$var wire 5 U# read_address_2 [4:0] $end
$var wire 32 V# read_data_1 [31:0] $end
$var wire 32 W# read_data_2 [31:0] $end
$var wire 32 X# read_data_HI [31:0] $end
$var wire 32 Y# read_data_LO [31:0] $end
$var wire 32 Z# read_register_2 [31:0] $end
$var wire 5 [# write_address [4:0] $end
$var wire 1 F write_enable $end
$var wire 32 \# write_data [31:0] $end
$var reg 32 ]# HI_reg [31:0] $end
$var reg 32 ^# LO_reg [31:0] $end
$upscope $end
$scope module write_register_execute_mux $end
$var wire 2 _# control [1:0] $end
$var wire 5 `# input_0 [4:0] $end
$var wire 5 a# input_1 [4:0] $end
$var wire 5 b# input_2 [4:0] $end
$var wire 5 c# input_3 [4:0] $end
$var reg 5 d# resolved [4:0] $end
$upscope $end
$scope module writeback_mux $end
$var wire 1 c control $end
$var wire 32 e# input_0 [31:0] $end
$var wire 32 f# input_1 [31:0] $end
$var wire 32 g# resolved [31:0] $end
$upscope $end
$upscope $end
$scope module raminst $end
$var wire 1 * clk $end
$var wire 32 h# data_address [31:0] $end
$var wire 1 ' data_read $end
$var wire 1 % data_write $end
$var wire 32 i# data_writedata [31:0] $end
$var wire 32 j# instr_address [31:0] $end
$var wire 32 k# instr_readdata [31:0] $end
$var reg 32 l# data_readdata [31:0] $end
$scope begin $unm_blk_5 $end
$var integer 32 m# i [31:0] $end
$var integer 32 n# j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000000000000000000 n#
b11000000000000000000000000000000 m#
bx l#
bx k#
bx j#
bx i#
bx h#
bx g#
bx f#
bx e#
bx d#
b0 c#
b11111 b#
bx a#
bx `#
bx _#
bx ^#
bx ]#
bx \#
bx [#
bx Z#
bx Y#
bx X#
bx W#
bx V#
bx U#
bx T#
1S#
1R#
bx Q#
bx P#
bx O#
bx N#
bx M#
bx L#
bx K#
bx J#
bx I#
bx H#
bx G#
bx F#
bx E#
bx D#
b100 C#
bx B#
b100 A#
bx @#
bx ?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
x3#
b0 2#
b0 1#
x0#
bx /#
bx .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx00 f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
b0 X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
b0 P"
b0 O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx D"
b0 C"
bx B"
b0 A"
bx @"
bx ?"
b0 >"
bx ="
bx <"
bx00 ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
x{
bx z
bx y
bx x
0w
xv
xu
b0 t
xs
b0 r
xq
bx p
bx o
bx n
xm
xl
xk
bx j
bx00 i
bx h
bx g
xf
xe
xd
xc
xb
xa
x`
bx _
bx ^
bx ]
x\
x[
xZ
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
xI
xH
xG
xF
bx E
bx00 D
bx C
bx B
bx A
bx @
bx ?
b0 >
bx =
bx <
x;
x:
x9
x8
bx 7
bx 6
bx 5
bx 4
bx 3
02
01
bx 0
bx /
bx .
bx -
0,
x+
0*
x)
bx (
x'
bx &
x%
bx $
bx #
bx "
bx !
$end
#1000
b0 1"
b0 I"
b0 y"
b0 ^
b0 <"
b0 G#
b0 @"
b0 D
b0 ;"
b0 E
b0 K"
b0 \#
b0 g#
b10111111110000000000000000000100 T
b10111111110000000000000000000100 >#
b10111111110000000000000000000100 K#
b0 /"
b0 J#
b0 6
b0 |"
b0 /#
b0 d#
b0 Y"
b0 D"
b0 ?"
b0 A
b0 B"
b0 W"
0v
0;
0:
00#
0s
0u
03#
b0 i
b0 f"
b0 j
b0 C
b0 h"
b0 p
b0 #"
b0 c"
b0 }
b0 e"
b0 +#
b0 O#
b0 R
b0 U#
b0 !"
b0 d"
b0 )#
b0 S
b0 T#
b0 _
b0 N#
09
0m
0\
b0 3"
b0 ["
b0 a"
0'"
0+"
0{
b1 P
b1 _"
b1 g"
b0 -"
b0 \"
b0 b"
0b
0f
1I
b0 ]"
b0 `"
b0 ^"
1)
0q
b10111111110000000000000000000100 Y
b10111111110000000000000000000100 H#
b10111111110000000000000000000100 I#
b0 Q
b0 <#
b0 f#
b0 4"
b0 Q"
b0 :#
b0 Q#
b0 7"
b0 R"
b0 9#
b0 P#
b0 4
b0 .#
b0 =#
b0 [#
b0 ."
b0 ;#
b0 e#
0$"
0("
0c
0F
b0 g
b0 "#
0k
b0 5
b0 $#
b0 -#
b0 8#
b0 $
b0 .
b0 i#
b0 7
b0 ##
b0 5"
b0 U"
b0 ~"
b0 5#
b0 8"
b0 V"
b0 }"
b0 4#
b0 (
b0 -
b0 h#
b0 0"
b0 T"
b0 !#
b0 6#
0Z
0%"
0)"
0%
0`
0'
0d
0G
b0 <
b0 L"
b0 v"
b0 ?
b0 M"
b0 u"
b100 X
b100 N"
b100 E#
b0 V
b0 r"
b0 D#
08
0l
0[
b0 B
b0 J"
b0 t"
b0 ~
b0 o"
b0 *#
b0 ""
b0 n"
b0 a#
b0 |
b0 p"
b0 ,#
b0 `#
b0 2"
b0 E"
b0 l"
0&"
0*"
b0 O
b0 s"
b0 _#
b0 ,"
b0 S"
b0 m"
0a
0e
0H
b0 W
b0 ="
b0 k"
b0 (#
b0 n
b0 Z"
b0 '#
b10111111110000000000000000000100 U
b10111111110000000000000000000100 &#
b10111111110000000000000000000100 B#
b10111111110000000000000000000100 F#
b100100000010010000000000010000 0
b100100000010010000000000010000 %#
b100100000010010000000000010000 "
b100100000010010000000000010000 o
b100100000010010000000000010000 k#
b10111111110000000000000000000000 #
b10111111110000000000000000000000 /
b10111111110000000000000000000000 j#
b10111111110000000000000000000000 ]
b10111111110000000000000000000000 ?#
b10111111110000000000000000000000 @#
b0 h
b0 q"
b0 z"
1,
xR#
x1
1*
#2000
1R#
01
0*
#3000
0,
xR#
x1
1*
#4000
1R#
01
0*
#5000
bx @"
b1000000 D
b1000000 ;"
b10111111110000000000000000001000 T
b10111111110000000000000000001000 >#
b10111111110000000000000000001000 K#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx C"
bx >"
bx >
bx A"
bx X"
bx Y"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx D"
bx ?"
bx A
bx B"
bx W"
bx 1"
bx I"
bx y"
b10110000001001000000000001000000 i
b10110000001001000000000001000000 f"
b10010000000000010000 j
b10000 C
b10000 h"
b10000 p
b1001 }
b1001 e"
b1001 +#
b1001 O#
b1001 R
b1001 U#
b1001 _
b1001 N#
b100001 3"
b100001 ["
b100001 a"
b0 P
b0 _"
b0 g"
b1 -"
b1 \"
b1 b"
b10000 ]"
b1001 `"
b1001 ^"
b10111111110000000000000000001000 Y
b10111111110000000000000000001000 H#
b10111111110000000000000000001000 I#
bx Q
bx <#
bx f#
bx $
bx .
bx i#
bx 7
bx ##
bx 5"
bx U"
bx ~"
bx 5#
bx 8"
bx V"
bx }"
bx 4#
bx <
bx L"
bx v"
bx ?
bx M"
bx u"
b1 O
b1 s"
b1 _#
1H
b10111111110000000000000001000100 ^
b10111111110000000000000001000100 <"
b10111111110000000000000001000100 G#
b10111111110000000000000000000100 W
b10111111110000000000000000000100 ="
b10111111110000000000000000000100 k"
b10111111110000000000000000000100 (#
b100100000010010000000000010000 n
b100100000010010000000000010000 Z"
b100100000010010000000000010000 '#
b10111111110000000000000000001000 U
b10111111110000000000000000001000 &#
b10111111110000000000000000001000 B#
b10111111110000000000000000001000 F#
b100100000010100000000000001001 0
b100100000010100000000000001001 %#
b100100000010100000000000001001 "
b100100000010100000000000001001 o
b100100000010100000000000001001 k#
b10111111110000000000000000000100 #
b10111111110000000000000000000100 /
b10111111110000000000000000000100 j#
b10111111110000000000000000000100 ]
b10111111110000000000000000000100 ?#
b10111111110000000000000000000100 @#
xR#
x1
1*
#6000
1R#
01
0*
#7000
b10111111110000000000000000001100 T
b10111111110000000000000000001100 >#
b10111111110000000000000000001100 K#
b100100 D
b100100 ;"
b10111111110000000000000000001100 Y
b10111111110000000000000000001100 H#
b10111111110000000000000000001100 I#
b10110000001010000000000000100100 i
b10110000001010000000000000100100 f"
b10100000000000001001 j
b1001 C
b1001 h"
b1001 p
b1010 }
b1010 e"
b1010 +#
b1010 O#
b1010 R
b1010 U#
bx /"
bx J#
b1001 ]"
b1010 `"
b1001 6
b1001 |"
b1001 /#
b1001 d#
b10000 C"
b10000 >"
b10000 >
b10000 A"
b10000 X"
b10111111110000000000000000001100 U
b10111111110000000000000000001100 &#
b10111111110000000000000000001100 B#
b10111111110000000000000000001100 F#
b1001010100001000000100001 0
b1001010100001000000100001 %#
b1001010100001000000100001 "
b1001010100001000000100001 o
b1001010100001000000100001 k#
b10111111110000000000000000001000 #
b10111111110000000000000000001000 /
b10111111110000000000000000001000 j#
b10111111110000000000000000001000 ]
b10111111110000000000000000001000 ?#
b10111111110000000000000000001000 @#
b10111111110000000000000000101100 ^
b10111111110000000000000000101100 <"
b10111111110000000000000000101100 G#
b10111111110000000000000000001000 W
b10111111110000000000000000001000 ="
b10111111110000000000000000001000 k"
b10111111110000000000000000001000 (#
b100100000010100000000000001001 n
b100100000010100000000000001001 Z"
b100100000010100000000000001001 '#
b10110000001001000000000001000000 h
b10110000001001000000000001000000 q"
b10110000001001000000000001000000 z"
b10111111110000000000000000001000 X
b10111111110000000000000000001000 N"
b10111111110000000000000000001000 E#
b10111111110000000000000000000100 V
b10111111110000000000000000000100 r"
b10111111110000000000000000000100 D#
b10000 B
b10000 J"
b10000 t"
b1001 |
b1001 p"
b1001 ,#
b1001 `#
b100001 2"
b100001 E"
b100001 l"
b0 O
b0 s"
b0 _#
b1 ,"
b1 S"
b1 m"
bx (
bx -
bx h#
bx 0"
bx T"
bx !#
bx 6#
1G
bx 4"
bx Q"
bx :#
bx Q#
bx 7"
bx R"
bx 9#
bx P#
xR#
x1
1*
#8000
1R#
01
0*
#9000
b100000010000100 D
b100000010000100 ;"
b10111111110000000000000000010000 T
b10111111110000000000000000010000 >#
b10111111110000000000000000010000 K#
bx E
bx K"
bx \#
bx g#
b1001 C"
b1001 >"
b1001 >
b1001 A"
b1001 X"
1u
b1010 6
b1010 |"
b1010 /#
b1010 d#
b10110100101010000100000010000100 i
b10110100101010000100000010000100 f"
b1001010100001000000100001 j
b1000000100001 C
b1000000100001 h"
b1000000100001 p
b10 #"
b10 c"
b1001 !"
b1001 d"
b1001 )#
b1001 S
b1001 T#
b0 _
b0 N#
b1 P
b1 _"
b1 g"
b0 -"
b0 \"
b0 b"
b100001 ]"
b0 ^"
b10111111110000000000000000010000 Y
b10111111110000000000000000010000 H#
b10111111110000000000000000010000 I#
bx ."
bx ;#
bx e#
1F
b10110000001001000000000001000000 g
b10110000001001000000000001000000 "#
b1001 5
b1001 $#
b1001 -#
b1001 8#
b10110000001010000000000000100100 h
b10110000001010000000000000100100 q"
b10110000001010000000000000100100 z"
b10111111110000000000000000001100 X
b10111111110000000000000000001100 N"
b10111111110000000000000000001100 E#
b10111111110000000000000000001000 V
b10111111110000000000000000001000 r"
b10111111110000000000000000001000 D#
b1001 B
b1001 J"
b1001 t"
b1010 |
b1010 p"
b1010 ,#
b1010 `#
b10111111110000000100000010010000 ^
b10111111110000000100000010010000 <"
b10111111110000000100000010010000 G#
b10111111110000000000000000001100 W
b10111111110000000000000000001100 ="
b10111111110000000000000000001100 k"
b10111111110000000000000000001100 (#
b1001010100001000000100001 n
b1001010100001000000100001 Z"
b1001010100001000000100001 '#
b10111111110000000000000000010000 U
b10111111110000000000000000010000 &#
b10111111110000000000000000010000 B#
b10111111110000000000000000010000 F#
b1000 0
b1000 %#
b1000 "
b1000 o
b1000 k#
b10111111110000000000000000001100 #
b10111111110000000000000000001100 /
b10111111110000000000000000001100 j#
b10111111110000000000000000001100 ]
b10111111110000000000000000001100 ?#
b10111111110000000000000000001100 @#
xR#
x1
1*
#10000
1R#
01
0*
#11000
b10111111110000000000000000010100 T
b10111111110000000000000000010100 >#
b10111111110000000000000000010100 K#
b100000 D
b100000 ;"
b10111111110000000000000000010100 Y
b10111111110000000000000000010100 H#
b10111111110000000000000000010100 I#
b10110000000000000000000000100000 i
b10110000000000000000000000100000 f"
b1000 j
b1000 C
b1000 h"
b1000 p
b0 #"
b0 c"
b0 }
b0 e"
b0 +#
b0 O#
b0 R
b0 U#
b0 !"
b0 d"
b0 )#
b0 S
b0 T#
1\
b1000 3"
b1000 ["
b1000 a"
b1000 ]"
b0 `"
b10 6
b10 |"
b10 /#
b10 d#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx C"
bx >"
bx >
bx A"
bx X"
0s
0u
b10 r
b10 O"
b10 2#
b1 t
b1 P"
b1 1#
b10111111110000000000000000010100 U
b10111111110000000000000000010100 &#
b10111111110000000000000000010100 B#
b10111111110000000000000000010100 F#
b0 0
b0 %#
b0 "
b0 o
b0 k#
b10111111110000000000000000010000 #
b10111111110000000000000000010000 /
b10111111110000000000000000010000 j#
b10111111110000000000000000010000 ]
b10111111110000000000000000010000 ?#
b10111111110000000000000000010000 @#
b10111111110000000000000000110000 ^
b10111111110000000000000000110000 <"
b10111111110000000000000000110000 G#
b10111111110000000000000000010000 W
b10111111110000000000000000010000 ="
b10111111110000000000000000010000 k"
b10111111110000000000000000010000 (#
b1000 n
b1000 Z"
b1000 '#
b10110100101010000100000010000100 h
b10110100101010000100000010000100 q"
b10110100101010000100000010000100 z"
b10111111110000000000000000010000 X
b10111111110000000000000000010000 N"
b10111111110000000000000000010000 E#
b10111111110000000000000000001100 V
b10111111110000000000000000001100 r"
b10111111110000000000000000001100 D#
b1000000100001 B
b1000000100001 J"
b1000000100001 t"
b10 ""
b10 n"
b10 a#
b1001 ~
b1001 o"
b1001 *#
b1 O
b1 s"
b1 _#
b0 ,"
b0 S"
b0 m"
b10110000001010000000000000100100 g
b10110000001010000000000000100100 "#
b1010 5
b1010 $#
b1010 -#
b1010 8#
b1001 4
b1001 .#
b1001 =#
b1001 [#
xR#
x1
1*
#12000
1R#
01
0*
#13000
b0 D
b0 ;"
b10111111110000000000000000011000 T
b10111111110000000000000000011000 >#
b10111111110000000000000000011000 K#
1;
1:
b0 r
b0 O"
b0 2#
b0 t
b0 P"
b0 1#
b0 6
b0 |"
b0 /#
b0 d#
b10110000000000000000000000000000 i
b10110000000000000000000000000000 f"
b0 j
b0 C
b0 h"
b0 p
0\
b0 3"
b0 ["
b0 a"
b0 ]"
b10111111110000000000000000011000 Y
b10111111110000000000000000011000 H#
b10111111110000000000000000011000 I#
b1010 4
b1010 .#
b1010 =#
b1010 [#
b10110100101010000100000010000100 g
b10110100101010000100000010000100 "#
b10 5
b10 $#
b10 -#
b10 8#
b10110000000000000000000000100000 h
b10110000000000000000000000100000 q"
b10110000000000000000000000100000 z"
b10111111110000000000000000010100 X
b10111111110000000000000000010100 N"
b10111111110000000000000000010100 E#
b10111111110000000000000000010000 V
b10111111110000000000000000010000 r"
b10111111110000000000000000010000 D#
1[
b1000 B
b1000 J"
b1000 t"
b0 ""
b0 n"
b0 a#
b0 |
b0 p"
b0 ,#
b0 `#
b0 ~
b0 o"
b0 *#
b1000 2"
b1000 E"
b1000 l"
b10111111110000000000000000010100 ^
b10111111110000000000000000010100 <"
b10111111110000000000000000010100 G#
b10111111110000000000000000010100 W
b10111111110000000000000000010100 ="
b10111111110000000000000000010100 k"
b10111111110000000000000000010100 (#
b0 n
b0 Z"
b0 '#
b10111111110000000000000000011000 U
b10111111110000000000000000011000 &#
b10111111110000000000000000011000 B#
b10111111110000000000000000011000 F#
b10111111110000000000000000010100 #
b10111111110000000000000000010100 /
b10111111110000000000000000010100 j#
b10111111110000000000000000010100 ]
b10111111110000000000000000010100 ?#
b10111111110000000000000000010100 @#
xR#
x1
1*
#14000
1R#
01
0*
#15000
bx T
bx >#
bx K#
0;
0:
b10110000000000000000000000000000 h
b10110000000000000000000000000000 q"
b10110000000000000000000000000000 z"
b10111111110000000000000000011000 X
b10111111110000000000000000011000 N"
b10111111110000000000000000011000 E#
b10111111110000000000000000010100 V
b10111111110000000000000000010100 r"
b10111111110000000000000000010100 D#
0[
b0 B
b0 J"
b0 t"
b0 2"
b0 E"
b0 l"
b10110000000000000000000000100000 g
b10110000000000000000000000100000 "#
b0 5
b0 $#
b0 -#
b0 8#
1Z
b10 4
b10 .#
b10 =#
b10 [#
xR#
x1
1*
#16000
1R#
01
0*
#17000
x)
xq
bx Y
bx H#
bx I#
b0 4
b0 .#
b0 =#
b0 [#
b10110000000000000000000000000000 g
b10110000000000000000000000000000 "#
0Z
b10111111110000000000000000011000 ^
b10111111110000000000000000011000 <"
b10111111110000000000000000011000 G#
b10111111110000000000000000011000 W
b10111111110000000000000000011000 ="
b10111111110000000000000000011000 k"
b10111111110000000000000000011000 (#
bx U
bx &#
bx B#
bx F#
bx 0
bx %#
bx "
bx o
bx k#
bx #
bx /
bx j#
bx ]
bx ?#
bx @#
xR#
x1
1*
#18000
1R#
01
0*
#19000
bx00 D
bx00 ;"
xv
x;
x:
x0#
xs
xu
bx00 i
bx00 f"
bx j
bx C
bx h"
bx p
bx #"
bx c"
bx }
bx e"
bx +#
bx O#
bx R
bx U#
bx !"
bx d"
bx )#
bx S
bx T#
bx _
bx N#
x9
xm
x\
bx 3"
bx ["
bx a"
x'"
x+"
x{
bx P
bx _"
bx g"
bx -"
bx \"
bx b"
xb
xf
xI
bx ]"
bx `"
bx ^"
bx ^
bx <"
bx G#
bx W
bx ="
bx k"
bx (#
bx n
bx Z"
bx '#
b10111111110000000000000000011100 X
b10111111110000000000000000011100 N"
b10111111110000000000000000011100 E#
b10111111110000000000000000011000 V
b10111111110000000000000000011000 r"
b10111111110000000000000000011000 D#
xR#
x1
1*
